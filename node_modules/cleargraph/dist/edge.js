"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class GraphEdge {
    constructor(sourceId, targetId, attr) {
        this.sourceId = sourceId;
        this.targetId = targetId;
        this.sourceId = sourceId;
        this.targetId = targetId;
        this.attr = attr;
    }
    stringify() {
        let attrStr = '';
        if (!!this.attr['stringify'] && typeof this.attr['stringify'] === 'function') {
            attrStr = this.attr.stringify();
        }
        else {
            attrStr = JSON.stringify(this.attr);
        }
        return attrStr;
    }
    static fromObject(obj, parseEdge) {
        if (!obj.hasOwnProperty('sourceId')) {
            throw Error('missing source id');
        }
        if (!obj.hasOwnProperty('targetId')) {
            throw Error('missing target id');
        }
        return { sourceId: obj.sourceId, targetId: obj.targetId, edge: parseEdge(obj.edge) };
    }
    static edgeId(sourceId, targetId) {
        return `${sourceId}->${targetId}`;
    }
    static parseEdgeId(id) {
        const spl = id.split("->");
        if (spl.length === 2) {
            return { sourceId: spl[0], targetId: spl[1] };
        }
        return { sourceId: '', targetId: '' };
    }
    get nodes() {
        return [this.sourceId, this.targetId];
    }
}
exports.GraphEdge = GraphEdge;
function genericParseEdge(edge) {
    if ((Object.keys(edge).length === 0 && edge.constructor === Object) || typeof (edge) !== 'object') {
        return edge;
    }
    return JSON.parse(edge);
}
exports.genericParseEdge = genericParseEdge;
function genericEdgeToJson(edge) {
    return edge;
}
exports.genericEdgeToJson = genericEdgeToJson;
//# sourceMappingURL=edge.js.map