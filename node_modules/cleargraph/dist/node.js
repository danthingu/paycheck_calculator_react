"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const lodash_1 = require("lodash");
const lodash_2 = __importDefault(require("lodash"));
class GraphNode {
    constructor(id, attr, inEdges, outEdges) {
        this.id = id;
        this.attr = attr;
        this._inEdges = inEdges || [];
        this._outEdges = outEdges || [];
    }
    setInEdge(edgeId) {
        this._inEdges.push(edgeId);
    }
    setOutEdge(edgeId) {
        this._outEdges.push(edgeId);
    }
    deleteEdge(edgeId) {
        lodash_2.default.remove(this._inEdges, function (edge) {
            return edge === edgeId;
        });
        lodash_2.default.remove(this._outEdges, function (edge) {
            return edge === edgeId;
        });
    }
    get inEdges() {
        return this._inEdges;
    }
    get outEdges() {
        return this._outEdges;
    }
    get nodeEdges() {
        return this._inEdges.concat(this._outEdges);
    }
    isSource() {
        return (this._inEdges.length === 0 && this._outEdges.length > 0);
    }
    isSink() {
        return (this._inEdges.length > 0 && this._outEdges.length === 0);
    }
    equals(node) {
        if (this.id !== node.id)
            return false;
        return lodash_1.isEqual(this.attr, node.attr);
    }
    stringify() {
        let attrStr = '';
        if (!!this.attr['stringify'] && typeof this.attr['stringify'] === 'function') {
            attrStr = this.attr.stringify();
        }
        else {
            attrStr = JSON.stringify(this.attr);
        }
        return attrStr;
    }
    static fromObject(obj, parseNode) {
        if (!obj.hasOwnProperty('id')) {
            throw Error('missing object id');
        }
        return { id: obj.id, node: parseNode(obj.node) };
    }
}
exports.GraphNode = GraphNode;
function genericParseNode(node) {
    if ((Object.keys(node).length === 0 && node.constructor === Object) || typeof (node) !== 'object') {
        return node;
    }
    return JSON.parse(node);
}
exports.genericParseNode = genericParseNode;
function genericNodeToJson(node) {
    return node;
}
exports.genericNodeToJson = genericNodeToJson;
//# sourceMappingURL=node.js.map