"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

  _defineProperty2 = function () {
    return data;
  };

  return data;
}

function _consumer() {
  const data = require("../../../api/consumer");

  _consumer = function () {
    return data;
  };

  return data;
}

function _linkTemplate() {
  const data = _interopRequireDefault(require("../../templates/link-template"));

  _linkTemplate = function () {
    return data;
  };

  return data;
}

function _constants() {
  const data = require("../../../constants");

  _constants = function () {
    return data;
  };

  return data;
}

function _codemodTemplate() {
  const data = require("../../templates/codemod-template");

  _codemodTemplate = function () {
    return data;
  };

  return data;
}

class Link {
  constructor() {
    (0, _defineProperty2().default)(this, "name", 'link [ids...]');
    (0, _defineProperty2().default)(this, "description", `generate symlinks to resolve module paths for imported components.\n  https://${_constants().BASE_DOCS_DOMAIN}/docs/dependencies#missing-links`);
    (0, _defineProperty2().default)(this, "alias", 'b');
    (0, _defineProperty2().default)(this, "opts", [['j', 'json', 'return the output as JSON'], ['r', 'rewire', 'EXPERIMENTAL. Replace relative paths with module paths in code (e.g. "../foo" => "@bit/foo")']]);
    (0, _defineProperty2().default)(this, "private", false);
    (0, _defineProperty2().default)(this, "loader", true);
  }

  action([ids], {
    rewire = false
  }) {
    return (0, _consumer().link)(ids, rewire);
  }

  report(results, _args, flags) {
    if (flags.json) {
      return JSON.stringify(results, null, 2);
    } // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!


    const linksResultsStr = (0, _linkTemplate().default)(results.linksResults);
    const rewireResults = results.codemodResults ? `\n\n${(0, _codemodTemplate().codemodTemplate)(results.codemodResults)}` : '';
    return linksResultsStr + rewireResults;
  }

}

exports.default = Link;