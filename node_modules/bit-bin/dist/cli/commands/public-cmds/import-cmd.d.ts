import { LegacyCommand, CommandOptions } from '../../legacy-command';
import Component from '../../../consumer/component';
import { ComponentWithDependencies } from '../../../scope';
import { ImportDetails } from '../../../consumer/component-ops/import-components';
import { MergeStrategy } from '../../../consumer/versions-ops/merge-version/merge-version';
export default class Import implements LegacyCommand {
    name: string;
    description: string;
    alias: string;
    opts: CommandOptions;
    loader: boolean;
    migration: boolean;
    remoteOp: boolean;
    action([ids]: [string[]], { tester, compiler, path, objects, displayDependencies, environment, override, verbose, json, ignoreDist, conf, skipNpmInstall, ignorePackageJson, merge, dependencies, dependents }: {
        tester?: boolean;
        compiler?: boolean;
        path?: string;
        objects?: boolean;
        displayDependencies?: boolean;
        environment?: boolean;
        override?: boolean;
        verbose?: boolean;
        json?: boolean;
        ignoreDist?: boolean;
        conf?: string;
        skipNpmInstall?: boolean;
        ignorePackageJson?: boolean;
        merge?: MergeStrategy;
        dependencies?: boolean;
        dependents?: boolean;
    }, packageManagerArgs: string[]): Promise<any>;
    report({ dependencies, envComponents, importDetails, warnings, displayDependencies, json }: {
        dependencies?: ComponentWithDependencies[];
        envComponents?: Component[];
        importDetails: ImportDetails[];
        warnings?: {
            notInPackageJson: [];
            notInNodeModules: [];
            notInBoth: [];
        };
        displayDependencies: boolean;
        json: boolean;
    }): string;
}
