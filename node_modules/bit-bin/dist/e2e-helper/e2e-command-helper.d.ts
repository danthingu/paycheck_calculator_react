/// <reference types="node" />
import { StdioOptions } from 'child_process';
import { InteractiveInputs } from '../interactive/utils/run-interactive-cmd';
import ScopesData from './e2e-scopes';
export default class CommandHelper {
    scopes: ScopesData;
    debugMode: boolean;
    bitBin: string;
    featuresToggle: string | undefined;
    constructor(scopes: ScopesData, debugMode: boolean);
    setFeatures(featuresToggle: string): void;
    resetFeatures(): void;
    runCmd(cmd: string, cwd?: string, stdio?: StdioOptions, overrideFeatures?: string): string;
    _getFeatureToggleCmdPrefix(overrideFeatures?: string): string;
    listRemoteScope(raw?: boolean, options?: string): string;
    listLocalScope(options?: string): string;
    listLocalScopeParsed(options?: string): Record<string, any>[];
    listRemoteScopeParsed(options?: string): any;
    listScopeParsed(scope: string, options?: string): any;
    catScope(includeExtraData?: boolean): any;
    catObject(hash: string, parse?: boolean): any;
    catComponent(id: string, cwd?: string, parse?: boolean): Record<string, any>;
    addComponent(filePaths: string, options?: Record<string, any> | string, cwd?: string): string;
    getConfig(configName: string): string;
    delConfig(configName: string): string;
    setConfig(configName: string, configVal: string): string;
    untrackComponent(id?: string, all?: boolean, cwd?: string): string;
    removeComponent(id: string, flags?: string): string;
    deprecateComponent(id: string, flags?: string): string;
    undeprecateComponent(id: string, flags?: string): string;
    tagComponent(id: string, tagMsg?: string, options?: string): string;
    tagWithoutMessage(id: string, version?: string, options?: string): string;
    tagAllComponents(options?: string, version?: string, assertTagged?: boolean): string;
    tagAllComponentsNew(options?: string, version?: string, assertTagged?: boolean): string;
    rewireAndTagAllComponents(options?: string, version?: string, assertTagged?: boolean): string;
    tagScope(version: string, message?: string, options?: string): string;
    untag(id: string): string;
    exportComponent(id: string, scope?: string, assert?: boolean, flags?: string): string;
    exportAllComponents(scope?: string): string;
    exportAllComponentsAndRewire(scope?: string): string;
    exportToCurrentScope(ids?: string): string;
    export(options?: string | undefined): string;
    ejectComponents(ids: string, flags?: string): string;
    ejectComponentsParsed(ids: string, flags?: string): any;
    importComponent(id: string): string;
    importManyComponents(ids: string[]): string;
    importComponentWithOptions(id: string | undefined, options: Record<string, any>): string;
    importAllComponents(writeToFileSystem?: boolean): string;
    isolateComponent(id: string, flags: string): string;
    isolateComponentWithCapsule(id: string, capsuleDir: string): string;
    getCapsuleOfComponent(id: string): any;
    importExtension(id: string): string;
    build(id?: string | undefined): string;
    buildComponentWithOptions(id: string | undefined, options: Record<string, any>, cwd?: string): string;
    testComponent(id?: string): string;
    testComponentWithOptions(id: string | undefined, options: Record<string, any>, cwd?: string): string;
    status(): string;
    statusJson(): any;
    expectStatusToBeClean(): void;
    expectStatusToNotHaveIssues(): void;
    statusComponentIsStaged(id: string): boolean;
    statusComponentIsModified(id: string): boolean;
    showComponent(id?: string): string;
    showComponentParsed(id?: string): any;
    showComponentWithOptions(id: string | undefined, options: Record<string, any>): string;
    checkoutVersion(version: string, ids: string, flags?: string, cwd?: string): string;
    checkout(values: string): string;
    mergeVersion(version: string, ids: string, flags?: string): string;
    diff(id?: string | undefined): string | null | undefined;
    log(id: string): string;
    move(from: string, to: string): string;
    runTask(taskName: string): string;
    create(name: string): string;
    moveComponent(id: string, to: string): string;
    link(flags?: string): string;
    linkAndRewire(ids?: string): string;
    packComponent(id: string, options: Record<string, any>, extract?: boolean): string;
    ejectConf(id?: string, options?: Record<string, any>): string;
    injectConf(id: string | undefined, options: Record<string, any> | null | undefined): string;
    doctor(options: Record<string, any>): string;
    doctorOne(diagnosisName: string, options: Record<string, any>, cwd?: string): string;
    doctorList(options: Record<string, any>): string;
    doctorJsonParsed(): any;
    parseOptions(options: Record<string, any>): string;
    runInteractiveCmd({ args, inputs, processOpts, opts }: {
        args: string[];
        inputs: InteractiveInputs;
        processOpts: Record<string, any>;
        opts: {
            defaultIntervalBetweenInputs: number;
            verbose: boolean;
        };
    }): Promise<string>;
}
