"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.INSIGHT_NAME = void 0;

function _bluebird() {
  const data = require("bluebird");

  _bluebird = function () {
    return data;
  };

  return data;
}

function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

  _defineProperty2 = function () {
    return data;
  };

  return data;
}

function _react() {
  const data = _interopRequireDefault(require("react"));

  _react = function () {
    return data;
  };

  return data;
}

function _ink() {
  const data = require("ink");

  _ink = function () {
    return data;
  };

  return data;
}

/* eslint-disable @typescript-eslint/no-unused-vars */
// import NoDataForInsight from '../exceptions/no-data-for-insight';
const INSIGHT_NAME = 'duplicate dependencies';
exports.INSIGHT_NAME = INSIGHT_NAME;

class DuplicateDependencies {
  constructor(graphBuilder) {
    (0, _defineProperty2().default)(this, "name", INSIGHT_NAME);
    (0, _defineProperty2().default)(this, "description", 'Get all duplicate dependencies in component graph');
    (0, _defineProperty2().default)(this, "graphBuilder", void 0);
    this.graphBuilder = graphBuilder;
  }

  _runInsight() {
    var _this = this;

    return (0, _bluebird().coroutine)(function* () {
      const graph = yield _this.graphBuilder.getGraph();

      if (!graph) {
        return {
          message: '',
          data: undefined
        };
      }

      const duplicates = graph.findDuplicateDependencies();
      const lenDependencies = [...duplicates.keys()].length;

      if (lenDependencies === 1) {
        return {
          message: `Found ${lenDependencies} duplicate dependency.`,
          data: duplicates
        };
      }

      return {
        message: `Found ${lenDependencies} duplicate dependencies.`,
        data: duplicates
      };
    })();
  }

  _formatData(data) {
    const formatted = [];

    for (const [dependency, depData] of data.entries()) {
      const dependents = this._getDependents(depData.priorVersions);

      formatted.push({
        dependencyId: dependency,
        latestVersion: depData.latestVersionId,
        dependents
      });
    }

    return formatted;
  }

  _getDependents(priorVersions) {
    const dependents = [];
    priorVersions.forEach(pVersion => {
      pVersion.immediateDependents.forEach(dependent => {
        dependents.push({
          id: dependent,
          usedVersion: pVersion.versionId
        });
      });
    });
    return dependents;
  }

  _renderData(data) {
    const element = /*#__PURE__*/_react().default.createElement("div", null, data.map(function (mainDependency) {
      return /*#__PURE__*/_react().default.createElement("div", {
        key: mainDependency.dependencyId
      }, /*#__PURE__*/_react().default.createElement(_ink().Text, null, "dependency: ", mainDependency.dependencyId), /*#__PURE__*/_react().default.createElement(_ink().Text, null, "latest version: ", mainDependency.latestVersion), /*#__PURE__*/_react().default.createElement("div", null, /*#__PURE__*/_react().default.createElement(_ink().Text, null, "dependents that dont use latest version:"), mainDependency.dependents.map(function (dependent) {
        return /*#__PURE__*/_react().default.createElement("div", {
          key: dependent.id
        }, /*#__PURE__*/_react().default.createElement(_ink().Text, null, /*#__PURE__*/_react().default.createElement(_ink().Color, {
          redBright: true
        }, dependent.id), " uses ", /*#__PURE__*/_react().default.createElement(_ink().Color, {
          redBright: true
        }, dependent.usedVersion)));
      })));
    }));

    return element;
  }

  run() {
    var _this2 = this;

    return (0, _bluebird().coroutine)(function* () {
      const bareResult = yield _this2._runInsight();

      const formattedData = _this2._formatData(bareResult.data);

      const renderedData = _this2._renderData(formattedData);

      const result = {
        metaData: {
          name: _this2.name,
          description: _this2.description
        },
        data: bareResult.data,
        renderedData
      };

      if (bareResult.message) {
        result.message = bareResult.message;
      }

      return result;
    })();
  }

}

exports.default = DuplicateDependencies;