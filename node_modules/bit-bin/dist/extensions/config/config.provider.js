"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = provideConfig;

function _bluebird() {
  const data = require("bluebird");

  _bluebird = function () {
    return data;
  };

  return data;
}

function _path() {
  const data = _interopRequireDefault(require("path"));

  _path = function () {
    return data;
  };

  return data;
}

function _workspaceConfig() {
  const data = _interopRequireDefault(require("../../consumer/config/workspace-config"));

  _workspaceConfig = function () {
    return data;
  };

  return data;
}

function _config2() {
  const data = require("./config");

  _config2 = function () {
    return data;
  };

  return data;
}

function _consumer() {
  const data = require("../../consumer");

  _consumer = function () {
    return data;
  };

  return data;
}

function _workspaceConfig2() {
  const data = require("./workspace-config");

  _workspaceConfig2 = function () {
    return data;
  };

  return data;
}

function _exceptions() {
  const data = require("../../consumer/config/exceptions");

  _exceptions = function () {
    return data;
  };

  return data;
}

function _invalidConfigFile() {
  const data = _interopRequireDefault(require("./exceptions/invalid-config-file"));

  _invalidConfigFile = function () {
    return data;
  };

  return data;
}

function provideConfig(_x, _x2, _x3, _x4) {
  return _provideConfig.apply(this, arguments);
} // This is used to handle cases where the user run bit init --reset / --reset-hard
// during this time we don't yet know if the user ask for init reset so we catch it here
// other places should handle cases when there is no config
// TODO: change the {} to some maybe type


function _provideConfig() {
  _provideConfig = (0, _bluebird().coroutine)(function* (_deps, _config, _slots, harmony) {
    _workspaceConfig().default.registerOnWorkspaceConfigIsExist(onLegacyWorkspaceConfigIsExist());

    _workspaceConfig().default.registerOnWorkspaceConfigEnsuring(onLegacyWorkspaceEnsure());

    const consumerInfo = yield (0, _consumer().getConsumerInfo)(process.cwd());
    const config = yield tryToGetConfig((consumerInfo === null || consumerInfo === void 0 ? void 0 : consumerInfo.path) || process.cwd());

    _workspaceConfig().default.registerOnWorkspaceConfigLoading(onLegacyWorkspaceLoad(config)); // TODO: change once config become maybe


    if (config.extensions) {
      // Send all configs to harmony
      config === null || config === void 0 ? void 0 : config.extensions.forEach(extension => {
        harmony.config.set(extension.id, extension.config);
      });
    }

    return config;
  });
  return _provideConfig.apply(this, arguments);
}

function tryToGetConfig(_x5) {
  return _tryToGetConfig.apply(this, arguments);
}

function _tryToGetConfig() {
  _tryToGetConfig = (0, _bluebird().coroutine)(function* (dirPath) {
    try {
      const config = yield _config2().Config.loadIfExist(dirPath);
      return config;
    } catch (err) {
      if (!(err instanceof _exceptions().InvalidBitJson) && !(err instanceof _invalidConfigFile().default)) {
        throw err;
      }

      return {};
    }
  });
  return _tryToGetConfig.apply(this, arguments);
}

function onLegacyWorkspaceConfigIsExist() {
  return /*#__PURE__*/function () {
    var _ref = (0, _bluebird().coroutine)(function* (dirPath) {
      return _workspaceConfig2().WorkspaceConfig.isExist(dirPath);
    });

    return function (_x6) {
      return _ref.apply(this, arguments);
    };
  }();
}

function onLegacyWorkspaceLoad(config) {
  return /*#__PURE__*/function () {
    var _ref2 = (0, _bluebird().coroutine)(function* (dirPath) {
      if ((config === null || config === void 0 ? void 0 : config.workspaceConfig) && config.path && _path().default.normalize(dirPath) === _path().default.dirname(config.path)) {
        return config.config.toLegacy();
      }

      const newConfig = yield _config2().Config.loadIfExist(dirPath);

      if (newConfig && newConfig.type === 'workspace') {
        return newConfig.config.toLegacy();
      }

      return undefined;
    });

    return function (_x7) {
      return _ref2.apply(this, arguments);
    };
  }();
}

function onLegacyWorkspaceEnsure() {
  const func = /*#__PURE__*/function () {
    var _ref3 = (0, _bluebird().coroutine)(function* (dirPath, standAlone = false, legacyWorkspaceConfigProps) {
      let workspaceConfigProps;

      if (legacyWorkspaceConfigProps) {
        workspaceConfigProps = (0, _workspaceConfig2().transformLegacyPropsToExtensions)(legacyWorkspaceConfigProps);
      }

      const legacyInitProps = {
        standAlone
      };
      const config = yield _config2().Config.ensureWorkspace(dirPath, workspaceConfigProps, legacyInitProps);
      const workspaceConfig = config.config;
      return workspaceConfig.toLegacy();
    });

    return function func(_x8) {
      return _ref3.apply(this, arguments);
    };
  }();

  return func;
}