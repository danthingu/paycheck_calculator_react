"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.flattenReplaySubject = flattenReplaySubject;
exports.flattenNestedMap = flattenNestedMap;
exports.toReplaySubject = toReplaySubject;

function _rxjs() {
  const data = require("rxjs");

  _rxjs = function () {
    return data;
  };

  return data;
}

function _operators() {
  const data = require("rxjs/operators");

  _operators = function () {
    return data;
  };

  return data;
}

/**
 * takes a stream of higher order ReplaySubjects and flattens it recursively.
 *
 * @param toFlat ReplaySubject with nested messages
 */
function flattenReplaySubject(toFlat) {
  return toFlat.pipe(flattenNestedMap());
}
/**
 *  RxJS operator which flatten a nested stream of ReplaySubjects.
 *
 * @param isRecursive should flatten recursively or 1 level
 */


function flattenNestedMap(isRecursive = true) {
  return (0, _operators().flatMap)(function (toFlat) {
    return toFlat instanceof _rxjs().ReplaySubject && isRecursive ? flattenReplaySubject(toFlat) : toReplaySubject(toFlat);
  });
}
/**
 * takes an object and creates a ReplaySubject from it.
 *
 * @param toSubject
 */


function toReplaySubject(toSubject) {
  if (toSubject instanceof _rxjs().ReplaySubject) {
    return toSubject;
  }

  const subject = new (_rxjs().ReplaySubject)();
  subject.next(toSubject);
  subject.complete();
  return subject;
}