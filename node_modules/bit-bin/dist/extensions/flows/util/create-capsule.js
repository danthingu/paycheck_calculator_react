"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createFakeCapsule = createFakeCapsule;
exports.getTestCase = getTestCase;
exports.getFakeCapsuleLocation = getFakeCapsuleLocation;

function _bluebird() {
  const data = require("bluebird");

  _bluebird = function () {
    return data;
  };

  return data;
}

function _path() {
  const data = require("path");

  _path = function () {
    return data;
  };

  return data;
}

function _capsule() {
  const data = require("@teambit/capsule");

  _capsule = function () {
    return data;
  };

  return data;
}

function _os() {
  const data = require("os");

  _os = function () {
    return data;
  };

  return data;
}

function _fsExtra() {
  const data = require("fs-extra");

  _fsExtra = function () {
    return data;
  };

  return data;
}

function _isolator() {
  const data = require("../../isolator");

  _isolator = function () {
    return data;
  };

  return data;
}

function createFakeCapsule(_x, _x2) {
  return _createFakeCapsule.apply(this, arguments);
}

function _createFakeCapsule() {
  _createFakeCapsule = (0, _bluebird().coroutine)(function* (fs, id) {
    const bitId = {
      toString: () => id
    };
    const location = getFakeCapsuleLocation(id);
    yield createFS(location, fs);
    const container = new (_isolator().FsContainer)(location);
    const capsule = new (_isolator().Capsule)(container, container.fs, // eslint-disable-next-line no-undef
    new (_capsule().Console)(), {}, {
      id: bitId
    });
    return capsule;
  });
  return _createFakeCapsule.apply(this, arguments);
}

function createFS(_x3, _x4) {
  return _createFS.apply(this, arguments);
}

function _createFS() {
  _createFS = (0, _bluebird().coroutine)(function* (targetDir, content) {
    yield (0, _fsExtra().mkdirp)(targetDir);
    yield Promise.all(Object.keys(content).map( /*#__PURE__*/function () {
      var _ref = (0, _bluebird().coroutine)(function* (key) {
        const realPath = (0, _path().join)(targetDir, key);
        const containingFolder = (0, _path().dirname)(realPath);
        yield (0, _fsExtra().mkdirp)(containingFolder);
        const filePath = (0, _path().resolve)(targetDir, key);
        yield (0, _fsExtra().writeFile)(filePath, content[key]);
      });

      return function (_x5) {
        return _ref.apply(this, arguments);
      };
    }()));
  });
  return _createFS.apply(this, arguments);
}

function getTestCase(name) {
  const main = 'src/index.js';
  return {
    [main]: `console.log('hello-world)`,
    'package.json': JSON.stringify({
      main,
      name
    }, null, 2)
  };
}

function getFakeCapsuleLocation(id) {
  return (0, _path().join)((0, _os().tmpdir)(), id);
}