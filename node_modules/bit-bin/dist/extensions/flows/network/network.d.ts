/// <reference types="node" />
import { ReplaySubject } from 'rxjs';
import { Graph } from 'graphlib';
import { EventEmitter } from 'events';
import { Workspace } from '../../workspace';
import { Consumer } from '../../../consumer';
import { ExecutionOptions } from './options';
import { Flow } from '../flow';
import { ComponentID } from '../../component';
import { Capsule } from '../../isolator';
export declare type GetFlow = (capsule: Capsule) => Promise<Flow>;
export declare type PostFlow = (capsule: Capsule) => Promise<void>;
declare type CacheValue = {
    visited: boolean;
    capsule: Capsule;
    result: any;
};
export declare type Cache = {
    [k: string]: CacheValue;
};
export declare class Network {
    private workspace;
    private seeders;
    private getFlow;
    private getGraph;
    private postFlow?;
    private emitter;
    constructor(workspace: Workspace, seeders: ComponentID[], getFlow: GetFlow, getGraph?: typeof getWorkspaceGraph, postFlow?: PostFlow | undefined, emitter?: EventEmitter);
    execute(options: ExecutionOptions): Promise<ReplaySubject<unknown>>;
    onWorkspaceLoaded(cb: any): void;
    traverse(graph: Graph, stream: ReplaySubject<any>, visitedCache: Cache, startTime: Date): void;
    private createGraph;
}
export declare function getWorkspaceGraph(consumer: Consumer): Promise<Graph>;
export {};
