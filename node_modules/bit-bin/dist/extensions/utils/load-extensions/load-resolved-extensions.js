"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.loadResolvedExtensions = loadResolvedExtensions;

function _bluebird() {
  const data = require("bluebird");

  _bluebird = function () {
    return data;
  };

  return data;
}

function _constants() {
  const data = require("./constants");

  _constants = function () {
    return data;
  };

  return data;
}

function _loadExtensionsByManifests() {
  const data = require("./load-extensions-by-manifests");

  _loadExtensionsByManifests = function () {
    return data;
  };

  return data;
}

function loadResolvedExtensions(_x, _x2, _x3) {
  return _loadResolvedExtensions.apply(this, arguments);
}

function _loadResolvedExtensions() {
  _loadResolvedExtensions = (0, _bluebird().coroutine)(function* (harmony, resolvedExtensions, // TODO: change to use the new logger, see more info at loadExtensions function in the workspace
  logger) {
    const manifests = resolvedExtensions.map(resolvedExtension => {
      const compId = resolvedExtension.component.id.toString();

      try {
        const manifest = resolvedExtension.require();

        manifest.name = compId;
        return manifest;
      } catch (e) {
        const warning = (0, _constants().UNABLE_TO_LOAD_EXTENSION)(compId);
        logger.warn(warning); // TODO: improve texts

        logger.console(warning, 'warn', 'yellow');
        logger.warn(warning, e); // legacyLogger.warn(`${warning} error: ${e.message}`);
        // legacyLogger.silly(e.stack);
      }

      return undefined;
    }); // Remove empty manifests as a result of loading issue

    const filteredManifests = manifests.filter(manifest => manifest);
    return (0, _loadExtensionsByManifests().loadExtensionsByManifests)(harmony, filteredManifests, logger);
  });
  return _loadResolvedExtensions.apply(this, arguments);
}