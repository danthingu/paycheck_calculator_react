import { DependencyResolverExtension } from '../dependency-resolver';
import Consumer from '../../consumer/consumer';
import { Scope } from '../../scope';
import CapsuleList from './capsule-list';
import Graph from '../../scope/graph/graph';
import { CLIExtension } from '../cli';
export declare type IsolatorDeps = [DependencyResolverExtension, CLIExtension];
export declare type ListResults = {
    workspace: string;
    capsules: string[];
};
export declare type Network = {
    capsules: CapsuleList;
    components: Graph;
};
export declare class IsolatorExtension {
    private dependencyResolver;
    static id: string;
    static dependencies: (typeof DependencyResolverExtension | typeof CLIExtension)[];
    static defaultConfig: {};
    static provide([dependencyResolver, cli]: IsolatorDeps): Promise<IsolatorExtension>;
    constructor(dependencyResolver: DependencyResolverExtension);
    createNetworkFromConsumer(seeders: string[], consumer: Consumer, opts?: {}): Promise<Network>;
    createNetworkFromScope(seeders: string[], scope: Scope, opts?: {}): Promise<Network>;
    private getBitIdsIncludeVersionsFromGraph;
    private createNetwork;
    list(consumer: Consumer): Promise<ListResults>;
}
