import { Capsule as CapsuleTemplate, Exec, Console, State } from '@teambit/capsule';
import { NodeFS } from '@teambit/any-fs';
import FsContainer, { BitExecOption } from './container';
import { Component } from '../../component';
import ContainerExec from './container-exec';
export default class Capsule extends CapsuleTemplate<Exec, NodeFS> {
    protected container: FsContainer;
    readonly fs: NodeFS;
    readonly console: Console;
    readonly state: State;
    readonly component: Component;
    private _wrkDir;
    constructor(container: FsContainer, fs: NodeFS, console: Console, state: State, component: Component);
    get wrkDir(): string;
    start(): Promise<any>;
    execNode(executable: string, args: any, exec: ContainerExec): Promise<ContainerExec>;
    typedExec(opts: BitExecOption, exec?: ContainerExec): Promise<ContainerExec>;
    outputFile(file: string, data: any, options: any): Promise<any>;
    removePath(dir: string): Promise<any>;
    symlink(src: string, dest: string): Promise<any>;
    static createFromComponent(component: Component, baseDir: string, opts?: {}): Promise<Capsule>;
}
