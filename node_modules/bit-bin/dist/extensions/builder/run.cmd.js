"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BuilderCmd = void 0;

function _bluebird() {
  const data = require("bluebird");

  _bluebird = function () {
    return data;
  };

  return data;
}

function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

  _defineProperty2 = function () {
    return data;
  };

  return data;
}

function _packageManager() {
  const data = require("../dependency-resolver/package-manager");

  _packageManager = function () {
    return data;
  };

  return data;
}

class BuilderCmd {
  constructor(builder, workspace, reporter) {
    this.builder = builder;
    this.workspace = workspace;
    this.reporter = reporter;
    (0, _defineProperty2().default)(this, "name", 'run-new [pattern]');
    (0, _defineProperty2().default)(this, "description", 'run set of tasks for build');
    (0, _defineProperty2().default)(this, "alias", '');
    (0, _defineProperty2().default)(this, "group", '');
    (0, _defineProperty2().default)(this, "private", true);
    (0, _defineProperty2().default)(this, "shortDescription", '');
    (0, _defineProperty2().default)(this, "options", [['v', 'verbose', 'print log stdout to the screen']]);
  }

  report([userPattern], {
    verbose
  }) {
    var _this = this;

    return (0, _bluebird().coroutine)(function* () {
      _this.reporter.title('Starting "build"');

      let capsulesInstalled = 0;
      let totalCapsules = 0;
      (0, _packageManager().onCapsuleInstalled)(componentName => {
        capsulesInstalled += 1;

        _this.reporter.setStatusText(`⏳ Resolving Components from the workspace (${capsulesInstalled}/${totalCapsules}). ${componentName}`);
      });
      (0, _packageManager().beforeInstallingCapsules)(numCapsules => {
        totalCapsules += numCapsules;
      });
      const pattern = userPattern && userPattern.toString();

      _this.reporter.title('Loading components');

      const components = pattern ? yield _this.workspace.byPattern(pattern) : yield _this.workspace.list();

      _this.reporter.title('🎬  Executing build');

      _this.reporter.setStatusText('⏳ Executing build');

      if (verbose) {
        _this.reporter.subscribeAll();
      }

      const results = yield _this.builder.build(components); // @todo: decide about the output

      results.forEach((result // eslint-disable-next-line no-console
      ) => console.log('result', `Env: ${result.env}\nResult: ${JSON.stringify(result.res, undefined, 2)}`));

      _this.reporter.end();

      return `compiled ${results.length} components successfully`;
    })();
  }

}

exports.BuilderCmd = BuilderCmd;