import { CLIExtension } from '../cli';
import { ComponentFactoryExt } from '../component';
import { DependencyResolverExtension } from '../dependency-resolver';
import { Environments } from '../environments';
import { IsolatorExtension } from '../isolator';
import { PkgExtension } from '../pkg';
import { React } from '../react';
import { ScopeExtension } from '../scope';
import { TesterExtension } from '../tester';
import { BuilderExtension } from '../builder';
import { GraphQLExtension } from '../graphql';
import { UIExtension } from '../ui';
export declare const manifestsMap: {
    [x: string]: import("@teambit/harmony").ExtensionManifest | typeof Environments | typeof DependencyResolverExtension | {
        name: string;
        dependencies: never[];
        config: {};
        provider: typeof import("../logger/logger.provider").provideLogger;
    } | typeof CLIExtension | {
        name: string;
        dependencies: {
            name: string;
            dependencies: never[];
            config: {};
            provider: typeof import("../logger/logger.provider").provideLogger;
        }[];
        config: {};
        provider: typeof import("../reporter/reporter.provider").provideReporter;
    } | typeof IsolatorExtension | typeof ComponentFactoryExt | typeof ScopeExtension | {
        name: string;
        dependencies: never[];
        config: {};
        provider: typeof import("../config/config.provider").default;
    } | typeof GraphQLExtension | typeof BuilderExtension | typeof PkgExtension | typeof TesterExtension | typeof React | typeof UIExtension | {
        name: string;
        dependencies: (import("@teambit/harmony").ExtensionManifest | typeof CLIExtension)[];
        provider: typeof import("../watch/watch.provider").provideWatch;
    };
};
