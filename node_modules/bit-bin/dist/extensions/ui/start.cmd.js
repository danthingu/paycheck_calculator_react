"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.EnvConsole = EnvConsole;
exports.StartCmd = void 0;

function _bluebird() {
  const data = require("bluebird");

  _bluebird = function () {
    return data;
  };

  return data;
}

function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

  _defineProperty2 = function () {
    return data;
  };

  return data;
}

function _react() {
  const data = _interopRequireWildcard(require("react"));

  _react = function () {
    return data;
  };

  return data;
}

function _ink() {
  const data = require("ink");

  _ink = function () {
    return data;
  };

  return data;
}

// eslint-disable-next-line @typescript-eslint/no-unused-vars
// eslint-disable-next-line @typescript-eslint/no-unused-vars
class StartCmd {
  constructor(ui, workspace) {
    this.ui = ui;
    this.workspace = workspace;
    (0, _defineProperty2().default)(this, "name", 'start [pattern]');
    (0, _defineProperty2().default)(this, "description", 'start a dev environment for a workspace or a specific component');
    (0, _defineProperty2().default)(this, "alias", 'c');
    (0, _defineProperty2().default)(this, "private", true);
    (0, _defineProperty2().default)(this, "group", 'development');
    (0, _defineProperty2().default)(this, "shortDescription", '');
    (0, _defineProperty2().default)(this, "options", []);
  }

  clearConsole() {
    process.stdout.write(process.platform === 'win32' ? '\x1B[2J\x1B[0f' : '\x1B[2J\x1B[3J\x1B[H');
  }

  render([userPattern]) {
    var _this = this;

    return (0, _bluebird().coroutine)(function* () {
      // @teambit/variants should be the one to take care of component patterns.
      const pattern = userPattern && userPattern.toString();
      const uiRuntime = yield _this.ui.createRuntime(pattern ? yield _this.workspace.byPattern(pattern) : undefined);

      _this.clearConsole(); // @ts-ignore
      // uiRuntime.dev();


      _this.clearConsole();

      return /*#__PURE__*/_react().default.createElement(EnvConsole, {
        runtime: uiRuntime
      });
    })();
  }

}

exports.StartCmd = StartCmd;

function EnvConsole(props) {
  const [, setCounter] = (0, _react().useState)(0);
  props;
  (0, _react().useEffect)(() => {
    const timer = setInterval(() => {
      setCounter(previousCounter => previousCounter + 1);
    }, 100);
    return () => {
      clearInterval(timer);
    };
  }, []);
  return /*#__PURE__*/_react().default.createElement(_ink().Box, null);
}