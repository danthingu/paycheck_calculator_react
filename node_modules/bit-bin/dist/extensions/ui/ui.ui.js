"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.UIRuntimeExtension = void 0;

function _bluebird() {
  const data = require("bluebird");

  _bluebird = function () {
    return data;
  };

  return data;
}

function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

  _defineProperty2 = function () {
    return data;
  };

  return data;
}

function _react() {
  const data = _interopRequireDefault(require("react"));

  _react = function () {
    return data;
  };

  return data;
}

function _reactDom() {
  const data = _interopRequireDefault(require("react-dom"));

  _reactDom = function () {
    return data;
  };

  return data;
}

function _harmony() {
  const data = require("@teambit/harmony");

  _harmony = function () {
    return data;
  };

  return data;
}

function _workspace() {
  const data = require("../workspace/workspace.ui");

  _workspace = function () {
    return data;
  };

  return data;
}

function _graphql() {
  const data = require("../graphql/graphql.ui");

  _graphql = function () {
    return data;
  };

  return data;
}

// import * as serviceWorker from './serviceWorker';
// If you want your app to work offline and load faster, you can change
// unregister() to register() below. Note this comes with some pitfalls.
// Learn more about service workers: https://bit.ly/CRA-PWA
// serviceWorker.unregister();

/**
 * extension
 */
class UIRuntimeExtension {
  constructor(workspace, graphql) {
    this.workspace = workspace;
    this.graphql = graphql;
  }

  render() {
    _reactDom().default.render( /*#__PURE__*/_react().default.createElement(_react().default.StrictMode, null, this.graphql.getProvider(this.workspace.getMain())), document.getElementById('root'));
  }

  static provider([workspace, graphql]) {
    return (0, _bluebird().coroutine)(function* () {
      return new UIRuntimeExtension(workspace, graphql);
    })();
  }

}

exports.UIRuntimeExtension = UIRuntimeExtension;
(0, _defineProperty2().default)(UIRuntimeExtension, "dependencies", [_workspace().WorkspaceUI, _graphql().GraphQlUI]);
(0, _defineProperty2().default)(UIRuntimeExtension, "slots", [_harmony().Slot.withType()]);