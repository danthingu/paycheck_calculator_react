import { Workspace } from '../workspace';
import ConsumerComponent from '../../consumer/component';
import { BitId } from '../../bit-id';
import { Environments } from '../environments';
import { CompilerTask } from './compiler.task';
import { Component } from '../component';
import { Capsule } from '../isolator';
declare type BuildResult = {
    component: string;
    buildResults: string[] | null | undefined;
};
export declare class Compile {
    private workspace;
    private envs;
    readonly task: CompilerTask;
    constructor(workspace: Workspace, envs: Environments, task: CompilerTask);
    compileOnWorkspace(componentsIds: string[] | BitId[], noCache?: boolean, verbose?: boolean, dontPrintEnvMsg?: boolean): Promise<BuildResult[]>;
    private compileWithNewCompilersOnWorkspace;
    compileWithLegacyCompilers(components: ConsumerComponent[], noCache?: boolean, verbose?: boolean, dontPrintEnvMsg?: boolean): Promise<BuildResult[]>;
    populateComponentDist(params: {
        verbose: boolean;
        noCache: boolean;
    }, component: ComponentAndCapsule): Promise<import("../../consumer/component/sources/dists").default | undefined>;
    writeComponentDist(componentAndCapsule: ComponentAndCapsule): Promise<string[]>;
}
export declare type ComponentAndCapsule = {
    consumerComponent: ConsumerComponent;
    component: Component;
    capsule: Capsule;
};
export {};
