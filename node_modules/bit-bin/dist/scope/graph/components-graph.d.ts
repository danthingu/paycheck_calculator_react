import { Graph as GraphLib } from 'graphlib';
import Graph from './graph';
import Component from '../../consumer/component/consumer-component';
import ComponentWithDependencies from '../component-dependencies';
import { ComponentsAndVersions } from '../scope';
import { BitId } from '../../bit-id';
import { Consumer } from '../../consumer';
import { Scope } from '..';
export declare type AllDependenciesGraphs = {
    graphDeps: GraphLib;
    graphDevDeps: GraphLib;
    graphExtensionDeps: GraphLib;
};
export declare function buildComponentsGraph(components: Component[]): AllDependenciesGraphs;
export declare function buildComponentsGraphForComponentsAndVersion(components: ComponentsAndVersions[]): AllDependenciesGraphs;
export declare function buildOneGraphForComponentsAndMultipleVersions(components: ComponentsAndVersions[]): Graph;
export declare function buildOneGraphForComponents(ids: BitId[], consumer: Consumer, direction?: 'normal' | 'reverse'): Promise<Graph>;
export declare function buildOneGraphForComponentsUsingScope(ids: BitId[], scope: Scope, direction?: 'normal' | 'reverse'): Promise<Graph>;
export declare function topologicalSortComponentDependencies(componentWithDependencies: ComponentWithDependencies): void;
