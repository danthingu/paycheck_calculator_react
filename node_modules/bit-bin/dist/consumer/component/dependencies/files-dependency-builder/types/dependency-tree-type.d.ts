import { BitId } from '../../../../../bit-id';
import { PathLinuxAbsolute } from '../../../../../utils/path';
export declare type Specifier = {
    isDefault: boolean;
    name: string;
    exported?: boolean;
};
export declare type ImportSpecifier = {
    mainFile: Specifier;
    linkFile?: Specifier;
};
export declare type FileObject = {
    file: string;
    importSpecifiers?: ImportSpecifier[];
    importSource: string;
    isCustomResolveUsed?: boolean;
    isLink?: boolean;
    linkDependencies?: Record<string, any>[];
};
export declare type LinkFile = {
    file: string;
    importSpecifiers: ImportSpecifier[];
};
declare type MissingType = 'files' | 'packages' | 'bits';
export interface ResolvedNodePackage {
    fullPath?: PathLinuxAbsolute;
    name: string;
    concreteVersion?: string;
    versionUsedByDependent?: string;
    componentId?: BitId;
}
export declare type DependenciesResults = {
    files?: FileObject[];
    packages?: {
        [packageName: string]: string;
    };
    unidentifiedPackages?: string[];
    bits?: Array<ResolvedNodePackage>;
    error?: Error;
    missing?: {
        [key in MissingType]: string[];
    };
};
export declare type Tree = {
    [filePath: string]: DependenciesResults;
};
export declare type ResolveModulesConfig = {
    modulesDirectories?: string[];
    aliases?: {
        [key: string]: string;
    };
};
export declare type DependencyTreeParams = {
    baseDir: string;
    workspacePath: string;
    filePaths: string[];
    bindingPrefix: string;
    resolveModulesConfig?: ResolveModulesConfig;
    visited?: Record<string, any>;
    cacheResolvedDependencies?: Record<string, any>;
    cacheProjectAst?: Record<string, any>;
};
export {};
