import { BitId, BitIds } from '../../bit-id';
import Consumer from '../consumer';
import { ExtensionConfigList, IExtensionConfigList } from './extension-config-list';
import { AbstractVinyl } from '../component/sources';
import { Source } from '../../scope/models';
export declare class ExtensionDataEntry {
    legacyId?: string | undefined;
    extensionId?: BitId | undefined;
    name?: string | undefined;
    config: {
        [key: string]: any;
    };
    data: {
        [key: string]: any;
    };
    artifacts: Array<AbstractVinyl | {
        relativePath: string;
        file: Source;
    }>;
    constructor(legacyId?: string | undefined, extensionId?: BitId | undefined, name?: string | undefined, config?: {
        [key: string]: any;
    }, data?: {
        [key: string]: any;
    }, artifacts?: Array<AbstractVinyl | {
        relativePath: string;
        file: Source;
    }>);
    get id(): string | BitId;
    get stringId(): string;
    get isLegacy(): boolean;
    clone(): ExtensionDataEntry;
}
export declare class ExtensionDataList extends Array<ExtensionDataEntry> implements IExtensionConfigList {
    get ids(): string[];
    get extensionsBitIds(): BitIds;
    findExtension(extensionId: string, ignoreVersion?: boolean): ExtensionDataEntry | undefined;
    findCoreExtension(extensionId: string): ExtensionDataEntry | undefined;
    remove(id: BitId): ExtensionDataList;
    toObject(): {};
    toExtensionConfigList(): ExtensionConfigList;
    clone(): ExtensionDataList;
    _filterLegacy(): ExtensionDataList;
    static fromObject(obj: {
        [extensionId: string]: any;
    }, consumer: Consumer): ExtensionDataList;
    static fromArray(entries: ExtensionDataEntry[]): ExtensionDataList;
}
