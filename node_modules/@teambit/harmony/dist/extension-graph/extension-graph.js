"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cleargraph_1 = require("cleargraph");
const from_extension_1 = require("./from-extension");
function getName(manifest) {
    return Reflect.getMetadata('harmony:name', manifest) || manifest.id || manifest.name;
}
class DependencyGraph extends cleargraph_1.Graph {
    constructor() {
        super(...arguments);
        this.cache = new Map();
    }
    byExecutionOrder() {
        return this.toposort(true);
    }
    execute() {
    }
    add(manifest) {
        const { vertices, edges } = from_extension_1.fromExtension(manifest);
        this.setNodes(vertices);
        this.setEdges(edges);
        return this;
    }
    load(extensions) {
        const { vertices, edges } = from_extension_1.fromExtensions(extensions);
        // Only set new vertices
        this.setNodes(vertices, false); // false because we don't want to override already-loaded extensions
        this.setEdges(edges);
        return this;
    }
    // :TODO refactor this asap
    getExtension(manifest) {
        const id = getName(manifest);
        const cachedVertex = this.cache.get(id);
        if (cachedVertex)
            return cachedVertex;
        const res = this.node(id);
        if (res) {
            this.cache.set(res.name, res);
            return res;
        }
        return null;
    }
    get(id) {
        const cachedVertex = this.cache.get(id);
        if (cachedVertex)
            return cachedVertex;
        const res = this.node(id);
        if (res) {
            this.cache.set(res.name, res);
            return res;
        }
        return null;
    }
    /**
     * build Harmony from a single extension.
     */
    static fromRoot(extension) {
        const { vertices, edges } = from_extension_1.fromExtension(extension);
        return new DependencyGraph(vertices, edges);
    }
    /**
     * build Harmony from set of extensions
     */
    static from(extensions) {
        const { vertices, edges } = from_extension_1.fromExtensions(extensions);
        return new DependencyGraph(vertices, edges);
    }
}
exports.default = DependencyGraph;
