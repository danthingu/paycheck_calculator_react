"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
require("reflect-metadata");
const extension_graph_1 = __importDefault(require("./extension-graph/extension-graph"));
const exceptions_1 = require("./exceptions");
const utils_1 = require("./utils");
const config_1 = require("./config");
class Harmony {
    constructor(
    /**
     * extension graph
     */
    graph, 
    /**
     * harmony top level config
     */
    config) {
        this.graph = graph;
        this.config = config;
        this.current = null;
    }
    /**
     * list all registered extensions
     */
    get extensions() {
        return this.graph.nodes;
    }
    /**
     * list all registered extensions ids
     */
    get extensionsIds() {
        return [...this.graph.nodes.keys()];
    }
    /**
     * set extensions during Harmony runtime.
     */
    set(extensions) {
        return __awaiter(this, void 0, void 0, function* () {
            this.graph.load(extensions);
            // Only load new extensions and their dependencies
            const extensionsToLoad = extensions.map((ext) => {
                return Reflect.getMetadata('harmony:name', ext) || ext.id || ext.name;
            });
            const subgraphs = this.graph.successorsSubgraph(extensionsToLoad);
            if (subgraphs) {
                const executionOrder = subgraphs.toposort(true);
                yield utils_1.asyncForEach(executionOrder, (ext) => __awaiter(this, void 0, void 0, function* () {
                    yield this.runOne(ext);
                }));
            }
        });
    }
    runOne(extension) {
        return __awaiter(this, void 0, void 0, function* () {
            if (extension.loaded)
                return;
            // create an index of all vertices in dependency graph
            const dependencies = yield Promise.all(extension.dependencies.map((dep) => __awaiter(this, void 0, void 0, function* () {
                const some = this.graph.getExtension(dep);
                if (some && some.instance !== null)
                    return some.instance;
                throw new Error(`could not retrieve instance for dependency: ${dep.name} of extension ${extension.name}`);
            })));
            try {
                return extension.__run(dependencies, this);
            }
            catch (err) {
                throw new exceptions_1.ExtensionLoadError(extension, err);
            }
        });
    }
    initExtension(id) {
        this.current = id;
    }
    endExtension() {
        this.current = null;
    }
    /**
     * get an extension from harmony.
     */
    get(id) {
        const extension = this.graph.get(id);
        if (!extension || !extension.instance)
            throw new Error(`failed loading extension ${id}`);
        return extension.instance;
    }
    /**
     * execute harmony extension. applies providers of all extensions by execution order.
     */
    run(manifest) {
        return __awaiter(this, void 0, void 0, function* () {
            // :TODO refactor to an exception
            if (Array.isArray(manifest))
                this.graph.load(manifest);
            else
                this.graph.load([manifest]);
            const executionOrder = this.graph.byExecutionOrder();
            yield utils_1.asyncForEach(executionOrder, (ext) => __awaiter(this, void 0, void 0, function* () {
                yield this.runOne(ext);
            }));
        });
    }
    /**
     * load harmony from a root extensions
     */
    static load(extensions, globalConfig) {
        const graph = extension_graph_1.default.from(extensions);
        const config = config_1.Config.from(globalConfig);
        return new Harmony(graph, config);
    }
    /**
     * load all extensions and execute harmony.
     */
    static run(extension) {
        return __awaiter(this, void 0, void 0, function* () {
            const graph = extension_graph_1.default.fromRoot(extension);
            const harmony = new Harmony(graph, config_1.Config.from({}));
            return harmony.run(extension);
        });
    }
}
exports.Harmony = Harmony;
exports.default = new Harmony(new extension_graph_1.default(), config_1.Config.from({}));
