"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const memfs_1 = require("memfs");
class MemoryFS {
    constructor() {
        this.volume = new memfs_1.Volume();
        // @ts-ignore
        this.promises = this.volume.promises;
    }
    access(path, mode, callback) {
        // @ts-ignore
        this.volume.access(path, mode, callback);
    }
    accessSync(path, mode) {
        this.volume.accessSync(path, mode);
    }
    appendFile(file, data, options, callback) {
        // @ts-ignore
        this.volume.appendFile(file, data, options);
    }
    mkdirpSync(path) {
        this.volume.mkdirpSync(path);
    }
    appendFileSync(file, data, options) {
        // @ts-ignore
        this.volume.appendFileSync(file, data, options);
    }
    chmod(path, mode, callback) {
        // @ts-ignore
        this.volume.chmod(path, mode, callback);
    }
    chmodSync(path, mode) {
        this.volume.chmodSync(path, mode);
    }
    chown(path, uid, gid, callback) {
        // @ts-ignore
        this.volume.chown(path, uid, gid, callback);
    }
    chownSync(path, uid, gid) {
        this.volume.chownSync(path, uid, gid);
    }
    close(fd, callback) {
        // @ts-ignore
        this.volume.close(fd, callback);
    }
    closeSync(fd) {
        this.volume.closeSync(fd);
    }
    copyFile(src, dest, callback) {
        // @ts-ignore
        this.volume.copyFile(src, dest, callback);
    }
    copyFileSync(src, dest, flags) {
        this.volume.copyFileSync(src, dest, flags);
    }
    createReadStream(path, options) {
        // @ts-ignore
        return this.volume.createReadStream(path, options);
    }
    createWriteStream(path, options) {
        return this.volume.createWriteStream(path, options);
    }
    exists(path, callback) {
        this.volume.exists(path, callback);
    }
    existsSync(path) {
        return false;
    }
    fchmod(fd, mode, callback) {
        // @ts-ignore
        this.volume.fchmod(fd, mode, callback);
    }
    fchmodSync(fd, mode) {
        this.volume.fchmodSync(fd, mode);
    }
    fchown(fd, uid, gid, callback) {
        // @ts-ignore
        this.volume.fchown(fd, uid, gid, callback);
    }
    fchownSync(fd, uid, gid) {
        this.volume.fchownSync(fd, uid, gid);
    }
    fdatasync(fd, callback) {
        // @ts-ignore
        this.volume.fdatasync(fd, callback);
    }
    fdatasyncSync(fd) {
        this.volume.fdatasyncSync(fd);
    }
    fstat(fd, callback) {
        // @ts-ignore
        this.volume.fstat(fd, callback);
    }
    fstatSync(fd) {
        return this.volume.fstatSync(fd);
    }
    fsync(fd, callback) {
        // @ts-ignore
        this.volume.fsync(fd, callback);
    }
    fsyncSync(fd) {
        this.volume.fsyncSync(fd);
    }
    ftruncate(fd, len, callback) {
        // @ts-ignore
        this.volume.ftruncate(fd, len, callback);
    }
    ftruncateSync(fd, len) {
        // @ts-ignore
        this.volume.ftruncateSync(fd, len);
    }
    futimes(fd, atime, mtime, callback) {
        // @ts-ignore
        this.volume.futimes(fd, atime, mtime, callback);
    }
    futimesSync(fd, atime, mtime) {
        this.volume.futimesSync(fd, atime, mtime);
    }
    lchmod(path, mode, callback) {
        // @ts-ignore
        this.volume.lchmod(path, mode, callback);
    }
    lchmodSync(path, mode) {
        this.volume.lchmodSync(path, mode);
    }
    lchown(path, uid, gid, callback) {
        // @ts-ignore
        this.volume.lchown(path, uid, gid, callback);
    }
    lchownSync(path, uid, gid) {
        this.volume.lchownSync(path, uid, gid);
    }
    link(existingPath, newPath, callback) {
        // @ts-ignore
        this.volume.link(existingPath, newPath, callback);
    }
    linkSync(existingPath, newPath) {
        this.volume.linkSync(existingPath, newPath);
    }
    lstat(path, callback) {
        // @ts-ignore
        this.volume.lstat(path, callback);
    }
    lstatSync(path) {
        return this.volume.lstatSync(path);
    }
    mkdir(path, options, callback) {
        // @ts-ignore
        this.volume.mkdir(path, options, callback);
    }
    mkdirSync(path, options) {
        // @ts-ignore
        this.volume.mkdirSync(path, options);
    }
    mkdtemp(prefix, options, callback) {
        // @ts-ignore
        this.volume.mkdtemp(prefix, options, callback);
    }
    mkdtempSync(prefix, options) {
        // @ts-ignore
        return this.volume.mkdtempSync(prefix, options);
    }
    open(path, flags, mode, callback) {
        // @ts-ignore
        this.volume.open(path, flags, mode, callback);
    }
    openSync(path, flags, mode) {
        // @ts-ignore
        return this.volume.openSync(path, flags, mode);
    }
    read(fd, buffer, offset, length, position, callback) {
        // @ts-ignore
        this.volume.read(fd, buffer, offset, length, position, callback);
    }
    readFile(path, options, callback) { }
    readFileSync(path, options) {
        return this.volume.readFileSync(path);
    }
    readSync(fd, buffer, offset, length, position) {
        // @ts-ignore
        return this.volume.readSync(fd, buffer, offset, length, position);
    }
    readdir(path, options, callback) {
        // @ts-ignore
        this.volume.readdir(path, options, callback);
    }
    readdirSync(path, options) {
        // @ts-ignore
        return this.volume.readdirSync(path, options);
    }
    readlink(path, options, callback) {
        // @ts-ignore
        this.volume.readlink(path, options, callback);
    }
    readlinkSync(path, options) {
        // @ts-ignore
        return this.volume.readlinkSync(path, options);
    }
    realpath(path, options, callback) {
        //@ts-ignore
        this.volume.realpath(path, options, callback);
    }
    realpathSync(path, options) {
        // @ts-ignore
        return this.volume.realpathSync(path, options);
    }
    rename(oldPath, newPath, callback) {
        // @ts-ignore
        this.volume.rename(oldPath, newPath, callback);
    }
    renameSync(oldPath, newPath) {
        this.volume.renameSync(oldPath, newPath);
    }
    rmdir(path, callback) {
        // @ts-ignore
        this.volume.rmdir(path, callback);
    }
    rmdirSync(path) {
        this.volume.rmdirSync(path);
    }
    stat(path, callback) {
        // @ts-ignore
        this.volume.stat(path, callback);
    }
    statSync(path) {
        return this.volume.statSync(path);
    }
    symlink(target, path, type, callback) {
        //@ts-ignore
        this.volume.symlink(target, path, type, callback);
    }
    symlinkSync(target, path, type) {
        // @ts-ignore
        this.volume.symlinkSync(target, path, type);
    }
    truncate(path, len, callback) {
        //@ts-ignore
        this.volume.truncate(path, len, callback);
    }
    truncateSync(path, len) {
        // @ts-ignore
        this.volume.truncateSync(path, len);
    }
    unlink(path, callback) {
        // @ts-ignore
        this.volume.unlink(path, callback);
    }
    unlinkSync(path) {
        this.volume.unlinkSync(path);
    }
    unwatchFile(filename, listener) {
        // @ts-ignore
        this.volume.unwatchFile(filename, listener);
    }
    utimes(path, atime, mtime, callback) {
        // @ts-ignore
        this.volume.utimes(path, atime, mtime, callback);
    }
    utimesSync(path, atime, mtime) {
        this.volume.utimesSync(path, atime, mtime);
    }
    watch(filename, options, listener) {
        // @ts-ignore
        return this.volume.watch(filename, options, listener);
    }
    watchFile(filename, options, listener) {
        // @ts-ignore
        this.volume.watchFile(filename, options, listener);
    }
    writeFile(path, data, options, callback) {
        // @ts-ignore
        this.volume.writeFile(path, data, options);
    }
    writeFileSync(path, data, options) {
        // @ts-ignore
        this.volume.writeFileSync(path, data, options);
    }
    writeSync(fd, buffer, offset, length, position) {
        // @ts-ignore
        return this.volume.writeSync(fd, buffer, offset, length, position);
    }
    write(fd, buffer, offset, length, position, callback) {
        this.write(fd, buffer, offset, length, position, callback);
    }
}
exports.MemoryFS = MemoryFS;
//# sourceMappingURL=memory-volume.js.map