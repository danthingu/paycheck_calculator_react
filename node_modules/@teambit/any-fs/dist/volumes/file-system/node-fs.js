"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const fs_1 = __importDefault(require("fs"));
const promises_1 = __importDefault(require("./promises"));
class NodeFS {
    constructor(workingDir) {
        this.workingDir = workingDir;
        this.promises = new promises_1.default();
    }
    getPath(path) {
        return path_1.join(this.workingDir, path);
    }
    access(path, mode, callback) {
        // @ts-ignore
        fs_1.default.access(this.getPath(path), mode, callback);
    }
    accessSync(path, mode) {
        fs_1.default.accessSync(this.getPath(path), mode);
    }
    appendFile(file, data, options, callback) {
        // @ts-ignore
        fs_1.default.appendFile(this.getPath(file), data, options);
    }
    appendFileSync(file, data, options) {
        fs_1.default.appendFileSync(this.getPath(file), data, options);
    }
    chmod(path, mode, callback) {
        fs_1.default.chmod(this.getPath(path), mode, callback);
    }
    chmodSync(path, mode) {
        fs_1.default.chmodSync(this.getPath(path), mode);
    }
    chown(path, uid, gid, callback) {
        fs_1.default.chown(this.getPath(path), uid, gid, callback);
    }
    chownSync(path, uid, gid) {
        fs_1.default.chownSync(this.getPath(path), uid, gid);
    }
    close(fd, callback) {
        fs_1.default.close(fd, callback);
    }
    closeSync(fd) {
        fs_1.default.closeSync(fd);
    }
    copyFile(src, dest, callback) {
        // @ts-ignore
        fs_1.default.copyFile(src, dest, callback);
    }
    copyFileSync(src, dest, flags) {
        fs_1.default.copyFileSync(src, dest, flags);
    }
    createReadStream(path, options) {
        return fs_1.default.createReadStream(this.getPath(path), options);
    }
    createWriteStream(path, options) {
        return fs_1.default.createWriteStream(this.getPath(path), options);
    }
    exists(path, callback) {
        fs_1.default.exists(this.getPath(path), callback);
    }
    existsSync(path) {
        return fs_1.default.existsSync(this.getPath(path));
    }
    fchmod(fd, mode, callback) {
        fs_1.default.fchmod(fd, mode, callback);
    }
    fchmodSync(fd, mode) {
        fs_1.default.fchmodSync(fd, mode);
    }
    fchown(fd, uid, gid, callback) {
        fs_1.default.fchown(fd, uid, gid, callback);
    }
    fchownSync(fd, uid, gid) {
        fs_1.default.fchownSync(fd, uid, gid);
    }
    fdatasync(fd, callback) {
        fs_1.default.fdatasync(fd, callback);
    }
    fdatasyncSync(fd) {
        fs_1.default.fdatasyncSync(fd);
    }
    fstat(fd, callback) {
        fs_1.default.fstat(fd, callback);
    }
    fstatSync(fd) {
        return fs_1.default.fstatSync(fd);
    }
    fsync(fd, callback) {
        fs_1.default.fsync(fd, callback);
    }
    fsyncSync(fd) {
        fs_1.default.fsyncSync(fd);
    }
    ftruncate(fd, len, callback) {
        // @ts-ignore
        fs_1.default.ftruncate(fd, len, callback);
    }
    ftruncateSync(fd, len) {
        fs_1.default.ftruncateSync(fd, len);
    }
    futimes(fd, atime, mtime, callback) {
        fs_1.default.futimes(fd, atime, mtime, callback);
    }
    futimesSync(fd, atime, mtime) {
        fs_1.default.futimesSync(fd, atime, mtime);
    }
    lchmod(path, mode, callback) {
        fs_1.default.lchmod(this.getPath(path), mode, callback);
    }
    lchmodSync(path, mode) {
        fs_1.default.lchmodSync(this.getPath(path), mode);
    }
    lchown(path, uid, gid, callback) {
        fs_1.default.lchown(this.getPath(path), uid, gid, callback);
    }
    lchownSync(path, uid, gid) {
        fs_1.default.lchownSync(this.getPath(path), uid, gid);
    }
    link(existingPath, newPath, callback) {
        fs_1.default.link(existingPath, newPath, callback);
    }
    linkSync(existingPath, newPath) {
        fs_1.default.linkSync(existingPath, newPath);
    }
    lstat(path, callback) {
        fs_1.default.lstat(this.getPath(path), callback);
    }
    lstatSync(path) {
        return fs_1.default.lstatSync(path);
    }
    mkdir(path, options, callback) {
        // @ts-ignore
        fs_1.default.mkdir(this.getPath(path), options, callback);
    }
    mkdirSync(path, options) {
        fs_1.default.mkdirSync(this.getPath(path), options);
    }
    mkdtemp(prefix, options, callback) {
        // @ts-ignore
        fs_1.default.mkdtemp(prefix, options, callback);
    }
    mkdtempSync(prefix, options) {
        return fs_1.default.mkdtempSync(prefix, options);
    }
    open(path, flags, mode, callback) {
        // @ts-ignore
        fs_1.default.open(this.getPath(path), flags, mode, callback);
    }
    openSync(path, flags, mode) {
        return fs_1.default.openSync(this.getPath(path), flags, mode);
    }
    read(fd, buffer, offset, length, position, callback) {
        fs_1.default.read(fd, buffer, offset, length, position, callback);
    }
    readFile(path, options, callback) { }
    readFileSync(path, options) {
        return fs_1.default.readFileSync(this.getPath(path));
    }
    readSync(fd, buffer, offset, length, position) {
        return fs_1.default.readSync(fd, buffer, offset, length, position);
    }
    readdir(path, options, callback) {
        // @ts-ignore
        fs_1.default.readdir(this.getPath(path), options, callback);
    }
    readdirSync(path, options) {
        // @ts-ignore
        return fs_1.default.readdirSync(this.getPath(path), options);
    }
    readlink(path, options, callback) {
        // @ts-ignore
        fs_1.default.readlink(this.getPath(path), options, callback);
    }
    readlinkSync(path, options) {
        return fs_1.default.readlinkSync(this.getPath(path), options);
    }
    realpath(path, options, callback) {
        //@ts-ignore
        fs_1.default.realpath(this.getPath(path), options, callback);
    }
    realpathSync(path, options) {
        return fs_1.default.realpathSync(this.getPath(path), options);
    }
    rename(oldPath, newPath, callback) {
        fs_1.default.rename(oldPath, newPath, callback);
    }
    renameSync(oldPath, newPath) {
        fs_1.default.renameSync(oldPath, newPath);
    }
    rmdir(path, callback) {
        fs_1.default.rmdir(this.getPath(path), callback);
    }
    rmdirSync(path) {
        fs_1.default.rmdirSync(this.getPath(path));
    }
    stat(path, callback) {
        fs_1.default.stat(this.getPath(path), callback);
    }
    statSync(path) {
        return fs_1.default.statSync(path);
    }
    symlink(target, path, type, callback) {
        //@ts-ignore
        fs_1.default.symlink(target, this.getPath(path), type, callback);
    }
    symlinkSync(target, path, type) {
        fs_1.default.symlinkSync(target, this.getPath(path), type);
    }
    truncate(path, len, callback) {
        //@ts-ignore
        fs_1.default.truncate(this.getPath(path), len, callback);
    }
    truncateSync(path, len) {
        fs_1.default.truncateSync(this.getPath(path), len);
    }
    unlink(path, callback) {
        fs_1.default.unlink(this.getPath(path), callback);
    }
    unlinkSync(path) {
        fs_1.default.unlinkSync(this.getPath(path));
    }
    unwatchFile(filename, listener) {
        fs_1.default.unwatchFile(filename, listener);
    }
    utimes(path, atime, mtime, callback) {
        fs_1.default.utimes(this.getPath(path), atime, mtime, callback);
    }
    utimesSync(path, atime, mtime) {
        fs_1.default.utimesSync(this.getPath(path), atime, mtime);
    }
    watch(filename, options, listener) {
        // @ts-ignore
        return fs_1.default.watch(filename, options, listener);
    }
    watchFile(filename, options, listener) {
        // @ts-ignore
        fs_1.default.watchFile(filename, options, listener);
    }
    writeFile(path, data, options, callback) {
        // @ts-ignore
        fs_1.default.writeFile(this.getPath(path), data, options);
    }
    writeFileSync(path, data, options) {
        fs_1.default.writeFileSync(this.getPath(path), data, options);
    }
    writeSync(fd, buffer, offset, length, position) {
        // @ts-ignore
        return fs_1.default.writeSync(fd, buffer, offset, length, position);
    }
    write(fd, buffer, offset, length, position, callback) {
        this.write(fd, buffer, offset, length, position, callback);
    }
}
exports.NodeFS = NodeFS;
//# sourceMappingURL=node-fs.js.map