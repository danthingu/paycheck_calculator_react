"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = __importDefault(require("fs"));
class FsPromisesAPI {
    access(path, mode) {
        return fs_1.default.promises.access(path, mode);
    }
    appendFile(path, data, options) {
        // @ts-ignore
        return fs_1.default.promises.appendFile(path, data);
    }
    chmod(path, mode) {
        return fs_1.default.promises.chmod(path, mode);
    }
    chown(path, uid, gid) {
        return fs_1.default.promises.chown(path, uid, gid);
    }
    copyFile(src, dest, flags) {
        return fs_1.default.promises.copyFile(src, dest, flags);
    }
    fchmod(handle, mode) {
        // @ts-ignore
        return fs_1.default.promises.fchmod(handle, mode);
    }
    fchown(handle, uid, gid) {
        // @ts-ignore
        return fs_1.default.promises.fchown(handle, uid, gid);
    }
    fdatasync(handle) {
        // @ts-ignore
        return fs_1.default.promises.fdatasync(handle);
    }
    fstat(handle) {
        // @ts-ignore
        return fs_1.default.promises.fstat(handle);
    }
    fsync(handle) {
        // @ts-ignore
        return fs_1.default.promises.fsync(handle);
    }
    ftruncate(handle, len) {
        // @ts-ignore
        return fs_1.default.promises.ftruncate(handle, len);
    }
    futimes(handle, atime, mtime) {
        // @ts-ignore
        return fs_1.default.promises.futimes(handle, atime, mtime);
    }
    lchmod(path, mode) {
        return fs_1.default.promises.lchmod(path, mode);
    }
    lchown(path, uid, gid) {
        return fs_1.default.promises.lchown(path, uid, gid);
    }
    link(existingPath, newPath) {
        return fs_1.default.promises.link(existingPath, newPath);
    }
    lstat(path) {
        return fs_1.default.promises.lstat(path);
    }
    mkdir(path, options) {
        return fs_1.default.promises.mkdir(path, options);
    }
    mkdtemp(prefix, options) {
        return fs_1.default.promises.mkdtemp(prefix, options);
    }
    open(path, flags, mode) {
        // @ts-ignore
        return fs_1.default.promises.open(path, flags, mode);
    }
    read(handle, buffer, offset, length, position) {
        // @ts-ignore
        return fs_1.default.promises.read(handle, buffer, offset, length, position);
    }
    readFile(path, options) {
        // @ts-ignore
        return fs_1.default.promises.readFile(path, options);
    }
    readdir(path, options) {
        // @ts-ignore
        return fs_1.default.promises.readdir(path, options);
    }
    readlink(path, options) {
        return fs_1.default.promises.readlink(path, options);
    }
    realpath(path, options) {
        return fs_1.default.promises.realpath(path, options);
    }
    rename(oldPath, newPath) {
        return fs_1.default.promises.rename(oldPath, newPath);
    }
    rmdir(path) {
        return fs_1.default.promises.rmdir(path);
    }
    stat(path) {
        return fs_1.default.promises.stat(path);
    }
    symlink(target, path, type) {
        return fs_1.default.promises.symlink(target, path, type);
    }
    truncate(path, len) {
        return fs_1.default.promises.truncate(path, len);
    }
    unlink(path) {
        return fs_1.default.promises.unlink(path);
    }
    utimes(path, atime, mtime) {
        return fs_1.default.promises.utimes(path, atime, mtime);
    }
    write(handle, buffer, offset, length, position) {
        // @ts-ignore
        fs_1.default.promises.write(handle, buffer, offset, length);
    }
    writeFile(path, data, options) {
        // @ts-ignore
        return fs_1.default.promises.writeFile(path, data, options);
    }
}
exports.default = FsPromisesAPI;
//# sourceMappingURL=promises.js.map