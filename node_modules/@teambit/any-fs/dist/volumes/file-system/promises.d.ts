/// <reference types="node" />
import { FileHandle, PromisesAPI } from '../../node';
import { Dirent, MakeDirectoryOptions, Stats } from 'fs';
import { PathLike } from 'fs';
export default class FsPromisesAPI implements PromisesAPI {
    access(path: PathLike, mode?: number): Promise<void>;
    appendFile(path: PathLike | FileHandle, data: any, options?: {
        encoding?: string | null;
        mode?: string | number;
        flag?: string | number;
    } | string | null): Promise<void>;
    chmod(path: PathLike, mode: string | number): Promise<void>;
    chown(path: PathLike, uid: number, gid: number): Promise<void>;
    copyFile(src: PathLike, dest: PathLike, flags?: number): Promise<void>;
    fchmod(handle: FileHandle, mode: string | number): Promise<void>;
    fchown(handle: FileHandle, uid: number, gid: number): Promise<void>;
    fdatasync(handle: FileHandle): Promise<void>;
    fstat(handle: FileHandle): Promise<Stats>;
    fsync(handle: FileHandle): Promise<void>;
    ftruncate(handle: FileHandle, len?: number): Promise<void>;
    futimes(handle: FileHandle, atime: string | number | Date, mtime: string | number | Date): Promise<void>;
    lchmod(path: PathLike, mode: string | number): Promise<void>;
    lchown(path: PathLike, uid: number, gid: number): Promise<void>;
    link(existingPath: PathLike, newPath: PathLike): Promise<void>;
    lstat(path: PathLike): Promise<Stats>;
    mkdir(path: PathLike, options?: number | string | MakeDirectoryOptions | null): Promise<void>;
    mkdtemp(prefix: string, options?: {
        encoding?: BufferEncoding | null;
    } | 'ascii' | 'utf8' | 'utf-8' | 'utf16le' | 'ucs2' | 'ucs-2' | 'base64' | 'latin1' | 'binary' | 'hex' | null): Promise<string>;
    mkdtemp(prefix: string, options: {
        encoding: 'buffer';
    } | 'buffer'): Promise<Buffer>;
    mkdtemp(prefix: string, options?: {
        encoding?: string | null;
    } | string | null): Promise<string | Buffer>;
    open(path: PathLike, flags: string | number, mode?: string | number): Promise<FileHandle>;
    read<TBuffer extends Buffer | Uint8Array>(handle: FileHandle, buffer: TBuffer, offset?: number | null, length?: number | null, position?: number | null): Promise<{
        bytesRead: number;
        buffer: TBuffer;
    }>;
    readFile(path: PathLike | FileHandle, options?: {
        encoding?: null;
        flag?: string | number;
    } | null): Promise<Buffer>;
    readFile(path: PathLike | FileHandle, options: {
        encoding: BufferEncoding;
        flag?: string | number;
    } | 'ascii' | 'utf8' | 'utf-8' | 'utf16le' | 'ucs2' | 'ucs-2' | 'base64' | 'latin1' | 'binary' | 'hex'): Promise<string>;
    readFile(path: PathLike | FileHandle, options?: {
        encoding?: string | null;
        flag?: string | number;
    } | string | null): Promise<string | Buffer>;
    readdir(path: PathLike, options?: {
        encoding?: BufferEncoding | null;
        withFileTypes?: false;
    } | 'ascii' | 'utf8' | 'utf-8' | 'utf16le' | 'ucs2' | 'ucs-2' | 'base64' | 'latin1' | 'binary' | 'hex' | null): Promise<string[]>;
    readdir(path: PathLike, options: {
        encoding: 'buffer';
        withFileTypes?: false;
    } | 'buffer'): Promise<Buffer[]>;
    readdir(path: PathLike, options?: {
        encoding?: string | null;
        withFileTypes?: false;
    } | string | null): Promise<string[] | Buffer[]>;
    readdir(path: PathLike, options: {
        encoding?: string | null;
        withFileTypes: true;
    }): Promise<Dirent[]>;
    readlink(path: PathLike, options?: {
        encoding?: BufferEncoding | null;
    } | 'ascii' | 'utf8' | 'utf-8' | 'utf16le' | 'ucs2' | 'ucs-2' | 'base64' | 'latin1' | 'binary' | 'hex' | null): Promise<string>;
    readlink(path: PathLike, options: {
        encoding: 'buffer';
    } | 'buffer'): Promise<Buffer>;
    readlink(path: PathLike, options?: {
        encoding?: string | null;
    } | string | null): Promise<string | Buffer>;
    realpath(path: PathLike, options?: {
        encoding?: BufferEncoding | null;
    } | 'ascii' | 'utf8' | 'utf-8' | 'utf16le' | 'ucs2' | 'ucs-2' | 'base64' | 'latin1' | 'binary' | 'hex' | null): Promise<string>;
    realpath(path: PathLike, options: {
        encoding: 'buffer';
    } | 'buffer'): Promise<Buffer>;
    realpath(path: PathLike, options?: {
        encoding?: string | null;
    } | string | null): Promise<string | Buffer>;
    rename(oldPath: PathLike, newPath: PathLike): Promise<void>;
    rmdir(path: PathLike): Promise<void>;
    stat(path: PathLike): Promise<Stats>;
    symlink(target: PathLike, path: PathLike, type?: string | null): Promise<void>;
    truncate(path: PathLike, len?: number): Promise<void>;
    unlink(path: PathLike): Promise<void>;
    utimes(path: PathLike, atime: string | number | Date, mtime: string | number | Date): Promise<void>;
    write<TBuffer extends Buffer | Uint8Array>(handle: FileHandle, buffer: TBuffer, offset?: number | null, length?: number | null, position?: number | null): Promise<{
        bytesWritten: number;
        buffer: TBuffer;
    }>;
    write(handle: FileHandle, string: any, position?: number | null, encoding?: string | null): Promise<{
        bytesWritten: number;
        buffer: string;
    }>;
    writeFile(path: PathLike | FileHandle, data: any, options?: {
        encoding?: string | null;
        mode?: string | number;
        flag?: string | number;
    } | string | null): Promise<void>;
}
