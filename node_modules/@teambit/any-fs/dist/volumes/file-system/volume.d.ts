/// <reference types="node" />
import { Dirent, AnyFS, FSWatcher, MakeDirectoryOptions, PromisesAPI, ReadStream, Stats, WriteStream } from '../../node';
export declare type PathLike = string;
export declare class Volume implements AnyFS {
    private workingDir;
    readonly promises: PromisesAPI;
    constructor(workingDir: PathLike);
    getPath(path: PathLike): string;
    access(path: PathLike, mode: number | undefined, callback: (err: NodeJS.ErrnoException | null) => void): void;
    access(path: PathLike, callback: (err: NodeJS.ErrnoException | null) => void): void;
    accessSync(path: PathLike, mode?: number): void;
    appendFile(file: PathLike | number, data: any, options: {
        encoding?: string | null;
        mode?: number | string;
        flag?: string;
    } | string | null, callback: (err: NodeJS.ErrnoException | null) => void): void;
    appendFile(file: PathLike | number, data: any, callback: (err: NodeJS.ErrnoException | null) => void): void;
    appendFileSync(file: PathLike, data: any, options?: {
        encoding?: string | null;
        mode?: number | string;
        flag?: string;
    } | string | null): void;
    chmod(path: PathLike, mode: string | number, callback: (err: NodeJS.ErrnoException | null) => void): void;
    chmodSync(path: PathLike, mode: string | number): void;
    chown(path: PathLike, uid: number, gid: number, callback: (err: NodeJS.ErrnoException | null) => void): void;
    chownSync(path: PathLike, uid: number, gid: number): void;
    close(fd: number, callback: (err: NodeJS.ErrnoException | null) => void): void;
    closeSync(fd: number): void;
    copyFile(src: PathLike, dest: PathLike, callback: (err: NodeJS.ErrnoException | null) => void): void;
    copyFile(src: PathLike, dest: PathLike, flags: number, callback: (err: NodeJS.ErrnoException | null) => void): void;
    copyFileSync(src: PathLike, dest: PathLike, flags?: number): void;
    createReadStream(path: PathLike, options?: string | {
        flags?: string;
        encoding?: string;
        fd?: number;
        mode?: number;
        autoClose?: boolean;
        start?: number;
        end?: number;
        highWaterMark?: number;
    }): ReadStream;
    createWriteStream(path: PathLike, options?: string | {
        flags?: string;
        encoding?: string;
        fd?: number;
        mode?: number;
        autoClose?: boolean;
        start?: number;
    }): WriteStream;
    exists(path: PathLike, callback: (exists: boolean) => void): void;
    existsSync(path: PathLike): boolean;
    fchmod(fd: number, mode: string | number, callback: (err: NodeJS.ErrnoException | null) => void): void;
    fchmodSync(fd: number, mode: string | number): void;
    fchown(fd: number, uid: number, gid: number, callback: (err: NodeJS.ErrnoException | null) => void): void;
    fchownSync(fd: number, uid: number, gid: number): void;
    fdatasync(fd: number, callback: (err: NodeJS.ErrnoException | null) => void): void;
    fdatasyncSync(fd: number): void;
    fstat(fd: number, callback: (err: NodeJS.ErrnoException | null, stats: Stats) => void): void;
    fstatSync(fd: number): Stats;
    fsync(fd: number, callback: (err: NodeJS.ErrnoException | null) => void): void;
    fsyncSync(fd: number): void;
    ftruncate(fd: number, len: number | undefined | null, callback: (err: NodeJS.ErrnoException | null) => void): void;
    ftruncate(fd: number, callback: (err: NodeJS.ErrnoException | null) => void): void;
    ftruncateSync(fd: number, len?: number | null): void;
    futimes(fd: number, atime: string | number | Date, mtime: string | number | Date, callback: (err: NodeJS.ErrnoException | null) => void): void;
    futimesSync(fd: number, atime: string | number | Date, mtime: string | number | Date): void;
    lchmod(path: PathLike, mode: string | number, callback: (err: NodeJS.ErrnoException | null) => void): void;
    lchmodSync(path: PathLike, mode: string | number): void;
    lchown(path: PathLike, uid: number, gid: number, callback: (err: NodeJS.ErrnoException | null) => void): void;
    lchownSync(path: PathLike, uid: number, gid: number): void;
    link(existingPath: PathLike, newPath: PathLike, callback: (err: NodeJS.ErrnoException | null) => void): void;
    linkSync(existingPath: PathLike, newPath: PathLike): void;
    lstat(path: PathLike, callback: (err: NodeJS.ErrnoException | null, stats: Stats) => void): void;
    lstatSync(path: PathLike): Stats;
    mkdir(path: PathLike, options: number | string | MakeDirectoryOptions | undefined | null, callback: (err: NodeJS.ErrnoException | null) => void): void;
    mkdir(path: PathLike, callback: (err: NodeJS.ErrnoException | null) => void): void;
    mkdirSync(path: PathLike, options?: number | string | MakeDirectoryOptions | null): void;
    mkdtemp(prefix: string, options: {
        encoding?: BufferEncoding | null;
    } | 'ascii' | 'utf8' | 'utf-8' | 'utf16le' | 'ucs2' | 'ucs-2' | 'base64' | 'latin1' | 'binary' | 'hex' | undefined | null, callback: (err: NodeJS.ErrnoException | null, folder: string) => void): void;
    mkdtemp(prefix: string, options: 'buffer' | {
        encoding: 'buffer';
    }, callback: (err: NodeJS.ErrnoException | null, folder: Buffer) => void): void;
    mkdtemp(prefix: string, options: {
        encoding?: string | null;
    } | string | undefined | null, callback: (err: NodeJS.ErrnoException | null, folder: string | Buffer) => void): void;
    mkdtemp(prefix: string, callback: (err: NodeJS.ErrnoException | null, folder: string) => void): void;
    mkdtempSync(prefix: string, options?: {
        encoding?: BufferEncoding | null;
    } | 'ascii' | 'utf8' | 'utf-8' | 'utf16le' | 'ucs2' | 'ucs-2' | 'base64' | 'latin1' | 'binary' | 'hex' | null): string;
    mkdtempSync(prefix: string, options: {
        encoding: 'buffer';
    } | 'buffer'): Buffer;
    mkdtempSync(prefix: string, options?: {
        encoding?: string | null;
    } | string | null): string | Buffer;
    open(path: PathLike, flags: string | number, mode: string | number | undefined | null, callback: (err: NodeJS.ErrnoException | null, fd: number) => void): void;
    open(path: PathLike, flags: string | number, callback: (err: NodeJS.ErrnoException | null, fd: number) => void): void;
    openSync(path: PathLike, flags: string | number, mode?: string | number | null): number;
    read<TBuffer extends NodeJS.ArrayBufferView>(fd: number, buffer: TBuffer, offset: number, length: number, position: number | null, callback: (err: NodeJS.ErrnoException | null, bytesRead: number, buffer: TBuffer) => void): void;
    readFile(path: PathLike | number, options: {
        encoding?: null;
        flag?: string;
    } | undefined | null, callback: (err: NodeJS.ErrnoException | null, data: Buffer) => void): void;
    readFile(path: PathLike | number, options: {
        encoding: string;
        flag?: string;
    } | string, callback: (err: NodeJS.ErrnoException | null, data: string) => void): void;
    readFile(path: PathLike | number, options: {
        encoding?: string | null;
        flag?: string;
    } | string | undefined | null, callback: (err: NodeJS.ErrnoException | null, data: string | Buffer) => void): void;
    readFile(path: PathLike | number, callback: (err: NodeJS.ErrnoException | null, data: Buffer) => void): void;
    readFileSync(path: PathLike | number, options?: {
        encoding?: null;
        flag?: string;
    } | null): Buffer;
    readFileSync(path: PathLike | number, options: {
        encoding: string;
        flag?: string;
    } | string): string;
    readFileSync(path: PathLike | number, options?: {
        encoding?: string | null;
        flag?: string;
    } | string | null): string | Buffer;
    readSync(fd: number, buffer: Buffer, offset: number, length: number, position: number | null): number;
    readdir(path: PathLike, options: {
        encoding: BufferEncoding | null;
        withFileTypes?: false;
    } | 'ascii' | 'utf8' | 'utf-8' | 'utf16le' | 'ucs2' | 'ucs-2' | 'base64' | 'latin1' | 'binary' | 'hex' | undefined | null, callback: (err: NodeJS.ErrnoException | null, files: string[]) => void): void;
    readdir(path: PathLike, options: {
        encoding: 'buffer';
        withFileTypes?: false;
    } | 'buffer', callback: (err: NodeJS.ErrnoException | null, files: Buffer[]) => void): void;
    readdir(path: PathLike, options: {
        encoding?: string | null;
        withFileTypes?: false;
    } | string | undefined | null, callback: (err: NodeJS.ErrnoException | null, files: string[] | Buffer[]) => void): void;
    readdir(path: PathLike, callback: (err: NodeJS.ErrnoException | null, files: string[]) => void): void;
    readdir(path: PathLike, options: {
        encoding?: string | null;
        withFileTypes: true;
    }, callback: (err: NodeJS.ErrnoException | null, files: Dirent[]) => void): void;
    readdirSync(path: PathLike, options?: {
        encoding: BufferEncoding | null;
        withFileTypes?: false;
    } | 'ascii' | 'utf8' | 'utf-8' | 'utf16le' | 'ucs2' | 'ucs-2' | 'base64' | 'latin1' | 'binary' | 'hex' | null): string[];
    readdirSync(path: PathLike, options: {
        encoding: 'buffer';
        withFileTypes?: false;
    } | 'buffer'): Buffer[];
    readdirSync(path: PathLike, options?: {
        encoding?: string | null;
        withFileTypes?: false;
    } | string | null): string[] | Buffer[];
    readdirSync(path: PathLike, options: {
        encoding?: string | null;
        withFileTypes: true;
    }): Dirent[];
    readlink(path: PathLike, options: {
        encoding?: BufferEncoding | null;
    } | 'ascii' | 'utf8' | 'utf-8' | 'utf16le' | 'ucs2' | 'ucs-2' | 'base64' | 'latin1' | 'binary' | 'hex' | undefined | null, callback: (err: NodeJS.ErrnoException | null, linkString: string) => void): void;
    readlink(path: PathLike, options: {
        encoding: 'buffer';
    } | 'buffer', callback: (err: NodeJS.ErrnoException | null, linkString: Buffer) => void): void;
    readlink(path: PathLike, options: {
        encoding?: string | null;
    } | string | undefined | null, callback: (err: NodeJS.ErrnoException | null, linkString: string | Buffer) => void): void;
    readlink(path: PathLike, callback: (err: NodeJS.ErrnoException | null, linkString: string) => void): void;
    readlinkSync(path: PathLike, options?: {
        encoding?: BufferEncoding | null;
    } | 'ascii' | 'utf8' | 'utf-8' | 'utf16le' | 'ucs2' | 'ucs-2' | 'base64' | 'latin1' | 'binary' | 'hex' | null): string;
    readlinkSync(path: PathLike, options: {
        encoding: 'buffer';
    } | 'buffer'): Buffer;
    readlinkSync(path: PathLike, options?: {
        encoding?: string | null;
    } | string | null): string | Buffer;
    realpath(path: PathLike, options: {
        encoding?: BufferEncoding | null;
    } | 'ascii' | 'utf8' | 'utf-8' | 'utf16le' | 'ucs2' | 'ucs-2' | 'base64' | 'latin1' | 'binary' | 'hex' | undefined | null, callback: (err: NodeJS.ErrnoException | null, resolvedPath: string) => void): void;
    realpath(path: PathLike, options: {
        encoding: 'buffer';
    } | 'buffer', callback: (err: NodeJS.ErrnoException | null, resolvedPath: Buffer) => void): void;
    realpath(path: PathLike, options: {
        encoding?: string | null;
    } | string | undefined | null, callback: (err: NodeJS.ErrnoException | null, resolvedPath: string | Buffer) => void): void;
    realpath(path: PathLike, callback: (err: NodeJS.ErrnoException | null, resolvedPath: string) => void): void;
    realpathSync(path: PathLike, options?: {
        encoding?: BufferEncoding | null;
    } | 'ascii' | 'utf8' | 'utf-8' | 'utf16le' | 'ucs2' | 'ucs-2' | 'base64' | 'latin1' | 'binary' | 'hex' | null): string;
    realpathSync(path: PathLike, options: {
        encoding: 'buffer';
    } | 'buffer'): Buffer;
    realpathSync(path: PathLike, options?: {
        encoding?: string | null;
    } | string | null): string | Buffer;
    rename(oldPath: PathLike, newPath: PathLike, callback: (err: NodeJS.ErrnoException | null) => void): void;
    renameSync(oldPath: PathLike, newPath: PathLike): void;
    rmdir(path: PathLike, callback: (err: NodeJS.ErrnoException | null) => void): void;
    rmdirSync(path: PathLike): void;
    stat(path: PathLike, callback: (err: NodeJS.ErrnoException | null, stats: Stats) => void): void;
    statSync(path: PathLike): Stats;
    symlink(target: PathLike, path: PathLike, type: 'dir' | 'file' | 'junction' | undefined | null, callback: (err: NodeJS.ErrnoException | null) => void): void;
    symlink(target: PathLike, path: PathLike, callback: (err: NodeJS.ErrnoException | null) => void): void;
    symlinkSync(target: PathLike, path: PathLike, type?: 'dir' | 'file' | 'junction' | null): void;
    truncate(path: PathLike, len: number | undefined | null, callback: (err: NodeJS.ErrnoException | null) => void): void;
    truncate(path: PathLike, callback: (err: NodeJS.ErrnoException | null) => void): void;
    truncateSync(path: PathLike, len?: number | null): void;
    unlink(path: PathLike, callback: (err: NodeJS.ErrnoException | null) => void): void;
    unlinkSync(path: PathLike): void;
    unwatchFile(filename: PathLike, listener?: (curr: Stats, prev: Stats) => void): void;
    utimes(path: PathLike, atime: string | number | Date, mtime: string | number | Date, callback: (err: NodeJS.ErrnoException | null) => void): void;
    utimesSync(path: PathLike, atime: string | number | Date, mtime: string | number | Date): void;
    watch(filename: PathLike, options: {
        encoding?: BufferEncoding | null;
        persistent?: boolean;
        recursive?: boolean;
    } | 'ascii' | 'utf8' | 'utf-8' | 'utf16le' | 'ucs2' | 'ucs-2' | 'base64' | 'latin1' | 'binary' | 'hex' | undefined | null, listener?: (event: string, filename: string) => void): FSWatcher;
    watch(filename: PathLike, options: {
        encoding: 'buffer';
        persistent?: boolean;
        recursive?: boolean;
    } | 'buffer', listener?: (event: string, filename: Buffer) => void): FSWatcher;
    watch(filename: PathLike, options: {
        encoding?: string | null;
        persistent?: boolean;
        recursive?: boolean;
    } | string | null, listener?: (event: string, filename: string | Buffer) => void): FSWatcher;
    watch(filename: PathLike, listener?: (event: string, filename: string) => any): FSWatcher;
    watchFile(filename: PathLike, options: {
        persistent?: boolean;
        interval?: number;
    } | undefined, listener: (curr: Stats, prev: Stats) => void): void;
    watchFile(filename: PathLike, listener: (curr: Stats, prev: Stats) => void): void;
    writeFile(path: PathLike, data: any, options: {
        encoding?: string | null;
        mode?: number | string;
        flag?: string;
    } | string | null, callback: (err: NodeJS.ErrnoException | null) => void): void;
    writeFile(path: PathLike, data: any, callback: (err: NodeJS.ErrnoException | null) => void): void;
    writeFileSync(path: PathLike, data: any, options?: {
        encoding?: string | null;
        mode?: number | string;
        flag?: string;
    } | string | null): void;
    writeSync(fd: number, buffer: NodeJS.ArrayBufferView, offset?: number | null, length?: number | null, position?: number | null): number;
    writeSync(fd: number, string: any, position?: number | null, encoding?: string | null): number;
    write<TBuffer extends NodeJS.ArrayBufferView>(fd: number, buffer: TBuffer, offset: number | undefined | null, length: number | undefined | null, position: number | undefined | null, callback: (err: NodeJS.ErrnoException | null, written: number, buffer: TBuffer) => void): void;
    write<TBuffer extends NodeJS.ArrayBufferView>(fd: number, buffer: TBuffer, offset: number | undefined | null, length: number | undefined | null, callback: (err: NodeJS.ErrnoException | null, written: number, buffer: TBuffer) => void): void;
    write<TBuffer extends NodeJS.ArrayBufferView>(fd: number, buffer: TBuffer, offset: number | undefined | null, callback: (err: NodeJS.ErrnoException | null, written: number, buffer: TBuffer) => void): void;
    write<TBuffer extends NodeJS.ArrayBufferView>(fd: number, buffer: TBuffer, callback: (err: NodeJS.ErrnoException | null, written: number, buffer: TBuffer) => void): void;
    write(fd: number, string: any, position: number | undefined | null, encoding: string | undefined | null, callback: (err: NodeJS.ErrnoException | null, written: number, str: string) => void): void;
    write(fd: number, string: any, position: number | undefined | null, callback: (err: NodeJS.ErrnoException | null, written: number, str: string) => void): void;
    write(fd: number, string: any, callback: (err: NodeJS.ErrnoException | null, written: number, str: string) => void): void;
}
