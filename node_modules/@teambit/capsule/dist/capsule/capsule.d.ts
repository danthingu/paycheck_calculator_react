import State from './state';
import { AnyFS } from '@teambit/any-fs';
import Container, { ExecOptions } from './container';
import Console from './console';
import { Exec } from './container';
import ContainerFactory from './container/container-factory';
export declare type CapsuleBaseOptions = {
    id: string;
};
export interface Serializable {
    toString(): string;
}
export default class Capsule<T extends Exec, Y extends AnyFS> {
    /**
     * container implementation the capsule is being executed within.
     */
    protected container: Container<T, Y>;
    /**
     * the capsule's file system.
     */
    readonly fs: Y;
    /**
     * console for controlling process streams as stdout, stdin and stderr.
     */
    readonly console: Console;
    /**
     * capsule's state.
     */
    readonly state: State;
    /**
     * config to pass capsule */
    readonly config: any;
    constructor(
    /**
     * container implementation the capsule is being executed within.
     */
    container: Container<T, Y>, 
    /**
     * the capsule's file system.
     */
    fs: Y, 
    /**
     * console for controlling process streams as stdout, stdin and stderr.
     */
    console: Console, 
    /**
     * capsule's state.
     */
    state: State, 
    /**
     * config to pass capsule */
    config?: any);
    get id(): string;
    get containerId(): string;
    run(modulePath: string, options?: {}): Promise<unknown>;
    runFn(fn: () => Serializable, options?: {
        cwd: string;
    }): Promise<unknown>;
    start(): Promise<any>;
    serialize(): string;
    log(): Promise<T>;
    on(event: string, fn: (data: any) => void): void;
    updateFs(fs: {
        [path: string]: string;
    }): Promise<void>;
    pause(): Promise<void>;
    resume(): Promise<void>;
    stop(): Promise<void>;
    status(): Promise<import("./container").ContainerStatus>;
    exec(execOpions: ExecOptions): Promise<T>;
    destroy(): Promise<void>;
    static create<fs extends AnyFS, Y extends Exec, T extends Capsule<Y, fs>>(containerFactory: ContainerFactory<Y, fs>, volume?: AnyFS, config?: any, initialState?: State, console?: Console): Promise<T>;
    static obtain<X extends Exec, fs extends AnyFS, T extends Capsule<X, fs>, Y extends CapsuleBaseOptions>(containerFactory: ContainerFactory<X, fs>, raw: string): Promise<T>;
}
