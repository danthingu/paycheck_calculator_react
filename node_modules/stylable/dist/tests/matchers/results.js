"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
function mediaQuery(chai, util) {
    var flag = util.flag;
    chai.Assertion.addMethod('mediaQuery', function (index) {
        var actual = flag(this, 'object');
        if (!actual.meta || !actual.exports) {
            throw new Error("expected Stylable result {meta, exports}, but got: {" + Object.keys(actual).join(', ') + "}");
        }
        var outputAst = actual.meta.outputAst;
        if (!outputAst) {
            throw new Error("expected result to be transfromed - missing outputAst on meta");
        }
        var nodes = outputAst.nodes;
        if (!nodes) {
            throw new Error("no rules found for media");
        }
        var media = nodes[index];
        if (!media || media.type !== 'atrule') {
            throw new Error("no media found at index #" + index);
        }
        flag(this, 'actualRule', media);
    });
}
exports.mediaQuery = mediaQuery;
function styleRules(chai, util) {
    var flag = util.flag;
    chai.Assertion.addMethod('styleRules', function (styleRules) {
        var actual = flag(this, 'object');
        if (!actual.meta || !actual.exports) {
            throw new Error("expected Stylable result {meta, exports}, but got: {" + Object.keys(actual).join(', ') + "}");
        }
        var scopeRule = flag(this, 'actualRule');
        if (!scopeRule) {
            var outputAst = actual.meta.outputAst;
            if (!outputAst) {
                throw new Error("expected result to be transfromed - missing outputAst on meta");
            }
            else {
                scopeRule = outputAst;
            }
        }
        if (Array.isArray(styleRules)) {
            scopeRule.walkRules(function (rule, index) {
                var nextExpectedRule = styleRules.shift();
                var actualRule = rule.toString();
                chai_1.expect(actualRule, "rule #" + index).to.equal(nextExpectedRule);
            });
        }
        else {
            var nodes = scopeRule.nodes;
            for (var expectedIndex in styleRules) {
                chai_1.expect(nodes, "rules exist").to.not.equal(undefined);
                chai_1.expect(nodes && nodes[expectedIndex].toString()).to.equal(styleRules[expectedIndex]);
            }
        }
    });
}
exports.styleRules = styleRules;
//# sourceMappingURL=results.js.map