"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var generate_test_util_1 = require("../utils/generate-test-util");
describe('scoping-edge-cases', function () {
    it('root scoping always uses origin meta', function () {
        var result = generate_test_util_1.generateStylableRoot({
            entry: "/style.st.css",
            files: {
                '/style.st.css': {
                    namespace: 'style',
                    content: "\n                        :import {\n                            -st-from: \"./comp.st.css\";\n                            -st-default: Comp;\n                        }\n\n                        .x {\n                            -st-extends: Comp;\n                        }\n\n                        .x::part::inner {\n\n                        }\n\n                    "
                },
                '/comp.st.css': {
                    namespace: 'comp',
                    content: "\n                        :import {\n                            -st-from: \"./inner.st.css\";\n                            -st-default: Inner;\n                        }\n                        .part {\n                            -st-extends: Inner;\n                        }\n                    "
                },
                '/inner.st.css': {
                    namespace: 'inner',
                    content: "\n                        .inner {\n\n                        }\n                    "
                }
            }
        });
        chai_1.expect(result.nodes[1].selector).to.equal('.style--x.comp--root .comp--part .inner--inner');
    });
    it('meta from pseudo-elements leak into the next selector', function () {
        var result = generate_test_util_1.generateStylableRoot({
            entry: "/style.st.css",
            files: {
                '/style.st.css': {
                    namespace: 'style',
                    content: "\n                        :import {\n                            -st-from: \"./comp.st.css\";\n                            -st-default: Comp;\n                        }\n\n                        .x {\n                            -st-states: test;\n                            -st-extends: Comp;\n                        }\n\n                        .x::part::inner, .x:test {\n\n                        }\n\n                    "
                },
                '/comp.st.css': {
                    namespace: 'comp',
                    content: "\n                        :import {\n                            -st-from: \"./inner.st.css\";\n                            -st-default: Inner;\n                        }\n                        .root{\n                            -st-states: test;\n                        }\n                        .part {\n                            -st-extends: Inner;\n                        }\n                    "
                },
                '/inner.st.css': {
                    namespace: 'inner',
                    content: "\n                        .root{\n                            -st-states: test;\n                        }\n                        .inner {\n\n                        }\n                    "
                }
            }
        });
        chai_1.expect(result.nodes[1].selector).to.equal('.style--x.comp--root .comp--part .inner--inner, .style--x.comp--root[data-style-test]');
    });
});
//# sourceMappingURL=scoping-edge-cases.spec.js.map