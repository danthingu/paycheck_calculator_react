"use strict";
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var postcss = require("postcss");
var stylable_optimizer_1 = require("../src/optimizer/stylable-optimizer");
var generate_test_util_1 = require("./utils/generate-test-util");
var deindent = require('deindent');
describe('StylableOptimizer', function () {
    it('removeComments', function () {
        var ast = postcss.parse("\n                /* comment 1 */\n                .a { /* comment 2 */ }\n                /* comment 3 */\n            ");
        stylable_optimizer_1.removeCommentNodes(ast);
        chai_1.expect(ast.toString().trim()).to.equal(".a { }");
    });
    it('removeComments in decls', function () {
        var ast = postcss.parse("\n                .a { color: red /* red */ green }\n            ");
        stylable_optimizer_1.removeCommentNodes(ast);
        chai_1.expect(ast.toString().trim()).to.equal(".a { color: red  green }");
    });
    it('removeStylableDirectives', function () {
        var ast = postcss.parse(deindent(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n                .a {\n                    -st-: 1;\n                    -st-states: 2;\n                }\n                @media (max-width) {\n                    .c {\n                        -st-: 1;\n                    }\n                }\n            "], ["\n                .a {\n                    -st-: 1;\n                    -st-states: 2;\n                }\n                @media (max-width) {\n                    .c {\n                        -st-: 1;\n                    }\n                }\n            "]))));
        ast.cleanRaws(false);
        new stylable_optimizer_1.StylableOptimizer().removeStylableDirectives(ast);
        chai_1.expect(ast.toString()).to.equal(deindent(templateObject_2 || (templateObject_2 = __makeTemplateObject(["\n                .a {}\n                @media (max-width) {\n                    .c {}\n                }\n            "], ["\n                .a {}\n                @media (max-width) {\n                    .c {}\n                }\n            "]))).trim());
    });
    it('removeUnusedComponents', function () {
        var _a, _b;
        var index = 'index.st.css';
        var files = (_a = {},
            _a[index] = {
                content: "\n                    .x{color: red}\n                "
            },
            _a);
        var stylable = generate_test_util_1.createStylableInstance({ files: files });
        var result = stylable.transform(files[index].content, index);
        var usageMapping = (_b = {},
            _b[result.meta.namespace] = false,
            _b);
        new stylable_optimizer_1.StylableOptimizer().optimize({ removeUnusedComponents: true }, result, stylable.delimiter, usageMapping);
        chai_1.expect(result.meta.outputAst.toString().trim()).to.equal('');
    });
    it('minifyCSS', function () {
        var _a;
        var index = 'index.st.css';
        var files = (_a = {},
            _a[index] = {
                content: "\n                    .x{/* empty */}\n                    .x{color: /* empty */ red}\n                    @media screen {\n                        .x{/* empty */}\n                    }\n                "
            },
            _a);
        var stylable = generate_test_util_1.createStylableInstance({ files: files });
        var meta = stylable.transform(files[index].content, index).meta;
        var output = new stylable_optimizer_1.StylableOptimizer().minifyCSS(meta.outputAst.toString());
        chai_1.expect(output).to.equal("." + meta.namespace + "--x{color:red}");
    });
});
var templateObject_1, templateObject_2;
//# sourceMappingURL=stylable-optimizer.spec.js.map