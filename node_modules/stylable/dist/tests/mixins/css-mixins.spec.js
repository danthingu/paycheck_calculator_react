"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/* tslint:disable:max-line-length */
var chai_1 = require("chai");
var test_utils_1 = require("../utils/test-utils");
describe('CSS Mixins', function () {
    it('apply simple class mixins declarations', function () {
        var result = test_utils_1.generateStylableRoot({
            entry: "/entry.st.css",
            files: {
                '/entry.st.css': {
                    namespace: 'entry',
                    content: "\n                .my-mixin {\n                    color: red;\n                }\n                .container {\n                    -st-mixin: my-mixin;\n                }\n            "
                }
            }
        });
        test_utils_1.matchRuleAndDeclaration(result, 1, '.entry--container', 'color: red');
    });
    it('transform state form imported element', function () {
        var result = test_utils_1.generateStylableRoot({
            entry: "/entry.st.css",
            files: {
                '/entry.st.css': {
                    namespace: 'entry',
                    content: "\n                        :import {\n                            -st-from: \"./design.st.css\";\n                            -st-named: Base;\n                        }\n                        .y {\n                           -st-mixin: Base;\n                        }\n                    "
                },
                '/design.st.css': {
                    namespace: 'design',
                    content: "\n                        :import {\n                            -st-from: \"./base.st.css\";\n                            -st-default: Base;\n                        }\n                        Base{}\n                    "
                },
                '/base.st.css': {
                    namespace: 'base',
                    content: "\n                        .root {\n                            -st-states: disabled;\n                        }\n                        .root:disabled {\n                            color: red;\n                        }\n                    "
                }
            }
        });
        test_utils_1.matchRuleAndDeclaration(result, 1, '.entry--y[data-base-disabled]', 'color: red');
    });
    it('transform state form extended root when used as mixin', function () {
        var result = test_utils_1.generateStylableRoot({
            entry: "/entry.st.css",
            files: {
                '/entry.st.css': {
                    namespace: 'entry',
                    content: "\n                        :import {\n                            -st-from: \"./design.st.css\";\n                            -st-default: Design;\n                        }\n                        .y {\n                           -st-mixin: Design;\n                        }\n                    "
                },
                '/design.st.css': {
                    namespace: 'design',
                    content: "\n                        :import {\n                            -st-from: \"./base.st.css\";\n                            -st-default: Base;\n                        }\n                        .root {\n                           -st-extends: Base;\n                        }\n                        .root:disabled { color: red; }\n                    "
                },
                '/base.st.css': {
                    namespace: 'base',
                    content: "\n                        .root {\n                            -st-states: disabled;\n                        }\n                    "
                }
            }
        });
        test_utils_1.matchRuleAndDeclaration(result, 1, '.entry--y[data-base-disabled]', 'color: red');
    });
    it.skip('mixin with multiple rules in keyframes', function () {
        // const result = generateStylableRoot({
        //     entry: `/entry.st.css`,
        //     files: {
        //         '/entry.st.css': {
        //             namespace: 'entry',
        //             content: `
        //                 .x {
        //                     color: red;
        //                 }
        //                 .x:hover {
        //                     color: green;
        //                 }
        //                 @keyframes my-name {
        //                     0% {
        //                         -st-mixin: x;
        //                     }
        //                     100% {
        //                     }
        //                 }
        //             `
        //         }
        //     }
        // });
        throw new Error('Test me');
    });
    it('apply simple class mixin that uses mixin itself', function () {
        var result = test_utils_1.generateStylableRoot({
            entry: "/entry.st.css",
            files: {
                '/entry.st.css': {
                    namespace: 'entry',
                    content: "\n                .x {\n                    color: red;\n                }\n                .y {\n                    -st-mixin: x;\n                }\n                .container {\n                    -st-mixin: y;\n                }\n            "
                }
            }
        });
        test_utils_1.matchRuleAndDeclaration(result, 2, '.entry--container', 'color: red');
    });
    it('apply simple class mixin with circular refs to the same selector', function () {
        var result = test_utils_1.generateStylableRoot({
            entry: "/entry.st.css",
            files: {
                '/entry.st.css': {
                    namespace: 'entry',
                    content: "\n                .x {\n                    color: red;\n                    -st-mixin: y;\n                }\n                .y {\n                    -st-mixin: x;\n                }\n            "
                }
            }
        });
        test_utils_1.matchRuleAndDeclaration(result, 0, '.entry--x', 'color: red;color: red');
        test_utils_1.matchRuleAndDeclaration(result, 1, '.entry--y', 'color: red');
    });
    it('apply simple class mixin with circular refs from multiple files', function () {
        var result = test_utils_1.generateStylableRoot({
            entry: "/entry.st.css",
            files: {
                '/entry.st.css': {
                    namespace: 'entry',
                    content: "\n                        :import {\n                            -st-from: \"./style1.st.css\";\n                            -st-named: y;\n                        }\n                        .x {\n                            color: red;\n                            -st-mixin: y;\n                        }\n                    "
                },
                '/style1.st.css': {
                    namespace: 'entry',
                    content: "\n                        :import {\n                            -st-from: \"./entry.st.css\";\n                            -st-named: x;\n                        }\n                        .y {\n                            -st-mixin: x;\n                        }\n                    "
                }
            }
        });
        test_utils_1.matchRuleAndDeclaration(result, 0, '.entry--x', 'color: red;color: red');
    });
    it('append complex selector that starts with the mixin name', function () {
        var result = test_utils_1.generateStylableRoot({
            entry: "/entry.st.css",
            files: {
                '/entry.st.css': {
                    namespace: 'entry',
                    content: "\n\n                .my-mixin:hover {\n                    color: blue;\n                }\n                .my-mixin .my-other-class {\n                    color: green;\n                }\n                .container {\n                    -st-mixin: my-mixin;\n                }\n            "
                }
            }
        });
        test_utils_1.matchRuleAndDeclaration(result, 3, '.entry--container:hover', 'color: blue');
        test_utils_1.matchRuleAndDeclaration(result, 4, '.entry--container .entry--my-other-class', 'color: green');
    });
    it.skip('should scope @keyframes from local mixin without duplicating the animation', function () {
        var result = test_utils_1.generateStylableRoot({
            entry: "/entry.st.css",
            files: {
                '/entry.st.css': {
                    namespace: 'entry',
                    content: "\n                .my-mixin {\n                    animation: original 2s;\n                }\n                @keyframes original {\n                    0% { color: red; }\n                    100% { color: green; }\n                }\n                .container {\n                    -st-mixin: my-mixin;\n                }\n                "
                }
            }
        });
        test_utils_1.matchRuleAndDeclaration(result, 2, '.entry--container', 'animation: entry--original 2s');
    });
    it('apply class mixins from import', function () {
        var result = test_utils_1.generateStylableRoot({
            entry: "/entry.st.css",
            files: {
                '/entry.st.css': {
                    namespace: 'entry',
                    content: "\n                :import {\n                    -st-from: \"./imported.st.css\";\n                    -st-named: my-mixin;\n                }\n                .container {\n                    -st-mixin: my-mixin;\n                }\n            "
                },
                '/imported.st.css': {
                    namespace: 'imported',
                    content: "\n                .my-mixin {\n                    color: red;\n                }\n            "
                }
            }
        });
        test_utils_1.matchRuleAndDeclaration(result, 0, '.entry--container', 'color: red');
    });
    it('apply mixin from named import (scope classes from mixin origin)', function () {
        var result = test_utils_1.generateStylableRoot({
            entry: "/entry.st.css",
            files: {
                '/entry.st.css': {
                    namespace: 'entry',
                    content: "\n                :import {\n                    -st-from: \"./imported.st.css\";\n                    -st-named: my-mixin;\n                }\n                .container {\n                    -st-mixin: my-mixin;\n                }\n            "
                },
                '/imported.st.css': {
                    namespace: 'imported',
                    content: "\n                .my-mixin {\n                    color: red;\n                }\n                .my-mixin .local {\n                    color: green;\n                }\n            "
                }
            }
        });
        test_utils_1.matchRuleAndDeclaration(result, 0, '.entry--container', 'color: red');
        test_utils_1.matchRuleAndDeclaration(result, 1, '.entry--container .imported--local', 'color: green');
    });
    it('apply mixin from local class with extends (scope class as root)', function () {
        var result = test_utils_1.generateStylableRoot({
            entry: "/entry.st.css",
            files: {
                '/entry.st.css': {
                    namespace: 'entry',
                    content: "\n                        :import {\n                            -st-from: \"./base.st.css\";\n                            -st-default: Base;\n                        }\n\n                        .container {\n                            -st-mixin: my-mixin;\n                        }\n\n                        .my-mixin {\n                            -st-extends: Base;\n                            color: red;\n                        }\n                        .my-mixin::part{\n                            color: green;\n                        }\n                    "
                },
                '/base.st.css': {
                    namespace: 'base',
                    content: ".part{}"
                }
            }
        });
        test_utils_1.matchRuleAndDeclaration(result, 0, '.entry--container', '-st-extends: Base;color: red');
        test_utils_1.matchRuleAndDeclaration(result, 1, '.entry--container .base--part', 'color: green');
    });
    it('apply mixin from named import with extends (scope classes from mixin origin)', function () {
        var result = test_utils_1.generateStylableRoot({
            entry: "/entry.st.css",
            files: {
                '/entry.st.css': {
                    namespace: 'entry',
                    content: "\n                        :import {\n                            -st-from: \"./imported.st.css\";\n                            -st-named: my-mixin;\n                        }\n                        .container {\n                            -st-mixin: my-mixin;\n                        }\n                    "
                },
                '/imported.st.css': {
                    namespace: 'imported',
                    content: "\n                        :import {\n                            -st-from: \"./base.st.css\";\n                            -st-default: Base;\n                        }\n                        .my-mixin {\n                            -st-extends: Base;\n                            color: red;\n                        }\n                        .my-mixin::part{\n                            color: green;\n                        }\n                  "
                },
                '/base.st.css': {
                    namespace: 'base',
                    content: ".part{}"
                }
            }
        });
        test_utils_1.matchRuleAndDeclaration(result, 0, '.entry--container', '-st-extends: Base;color: red');
        test_utils_1.matchRuleAndDeclaration(result, 1, '.entry--container .base--part', 'color: green');
    });
    it('should apply root mixin on child class (Root mixin mode)', function () {
        var result = test_utils_1.generateStylableRoot({
            entry: "/entry.st.css",
            files: {
                '/entry.st.css': {
                    namespace: 'entry',
                    content: "\n\n                        .container {\n                            -st-mixin: root;\n                        }\n\n                        .class {\n\n                        }\n                    "
                }
            }
        });
        test_utils_1.matchRuleAndDeclaration(result, 0, '.entry--container', '');
        test_utils_1.matchRuleAndDeclaration(result, 1, '.entry--container .entry--container', '');
        test_utils_1.matchRuleAndDeclaration(result, 2, '.entry--container .entry--class', '');
        test_utils_1.matchRuleAndDeclaration(result, 3, '.entry--class', '');
    });
    it('apply mixin from named import with extends (scope classes from mixin origin) !! with alias jump', function () {
        var result = test_utils_1.generateStylableRoot({
            entry: "/entry.st.css",
            files: {
                '/entry.st.css': {
                    namespace: 'entry',
                    content: "\n                        :import {\n                            -st-from: \"./jump.st.css\";\n                            -st-named: my-mixin;\n                        }\n                        .container {\n                            -st-mixin: my-mixin;\n                        }\n                    "
                },
                '/jump.st.css': {
                    namespace: 'imported',
                    content: "\n                        :import {\n                            -st-from: \"./imported.st.css\";\n                            -st-named: my-mixin;\n                        }\n                        .my-mixin {}\n                        .my-mixin::part {}\n                  "
                },
                '/imported.st.css': {
                    namespace: 'imported',
                    content: "\n                        :import {\n                            -st-from: \"./base.st.css\";\n                            -st-default: Base;\n                        }\n                        .my-mixin {\n                            -st-extends: Base;\n                            color: red;\n                        }\n                        .my-mixin::part{\n                            color: green;\n                        }\n                  "
                },
                '/base.st.css': {
                    namespace: 'base',
                    content: ".part{}"
                }
            }
        });
        test_utils_1.matchRuleAndDeclaration(result, 0, '.entry--container', '-st-extends: Base;color: red');
        test_utils_1.matchRuleAndDeclaration(result, 1, '.entry--container .base--part', 'color: green');
    });
    it('apply mixin with two root replacements', function () {
        var result = test_utils_1.generateStylableRoot({
            entry: "/entry.st.css",
            files: {
                '/entry.st.css': {
                    namespace: 'entry',
                    content: "\n                :import {\n                    -st-from: \"./imported.st.css\";\n                    -st-named: i;\n                }\n                .x {\n                    -st-mixin: i;\n                }\n            "
                },
                '/imported.st.css': {
                    namespace: 'imported',
                    content: "\n                        .i .i.y  {\n                            color: yellow;\n                        }\n                    "
                }
            }
        });
        test_utils_1.matchRuleAndDeclaration(result, 1, '.entry--x .entry--x.imported--y', 'color: yellow');
    });
    it('apply complex mixin on complex selector', function () {
        var result = test_utils_1.generateStylableRoot({
            entry: "/entry.st.css",
            files: {
                '/entry.st.css': {
                    namespace: 'entry',
                    content: "\n                    .i {\n                        color: red;\n                    }\n\n                    .i:hover, .local:hover, .i.local:hover .inner {\n                        color: green;\n                    }\n\n                    .x:hover .y {\n                        -st-mixin: i;\n                    }\n                "
                }
            }
        });
        test_utils_1.matchAllRulesAndDeclarations(result, [
            ['.entry--x:hover .entry--y', 'color: red'],
            [
                '.entry--x:hover .entry--y:hover, .entry--x:hover .entry--y.entry--local:hover .entry--inner',
                'color: green'
            ]
        ], '', 2);
    });
    it('apply mixin with media query', function () {
        var result = test_utils_1.generateStylableRoot({
            entry: "/entry.st.css",
            files: {
                '/entry.st.css': {
                    namespace: 'entry',
                    content: "\n                :import {\n                    -st-from: \"./imported.st.css\";\n                    -st-named: i;\n                }\n                .x {\n                    -st-mixin: i;\n                }\n            "
                },
                '/imported.st.css': {
                    namespace: 'imported',
                    content: "\n                        .y {background: #000}\n                        .i {color: red;}\n                        @media (max-width: 300px) {\n                            .y {background: #000}\n                            .i {color: yellow;}\n                            .i:hover {color: red;}\n                        }\n                        .i:hover {color: blue;}\n                    "
                }
            }
        });
        test_utils_1.matchRuleAndDeclaration(result, 0, '.entry--x', 'color: red');
        var media = result.nodes[1];
        chai_1.expect(media.params, 'media params').to.equal('(max-width: 300px)');
        test_utils_1.matchAllRulesAndDeclarations(media, [['.entry--x', 'color: yellow'], ['.entry--x:hover', 'color: red']], '@media');
        test_utils_1.matchRuleAndDeclaration(result, 2, '.entry--x:hover', 'color: blue');
    });
    it('apply mixin from root style sheet', function () {
        var result = test_utils_1.generateStylableRoot({
            entry: "/entry.st.css",
            files: {
                '/entry.st.css': {
                    namespace: 'entry',
                    content: "\n                :import {\n                    -st-from: \"./imported.st.css\";\n                    -st-default: X;\n                }\n\n                .x {\n                    -st-mixin: X;\n                }\n            "
                },
                '/imported.st.css': {
                    namespace: 'imported',
                    content: "\n                    .root {color:red;}\n                    .y {color:green;}\n                    @media (max-width: 100px) {\n                       .root{color:yellow;}\n                       .y{color:gold;}\n                    }\n\n                "
                }
            }
        });
        test_utils_1.matchRuleAndDeclaration(result, 0, '.entry--x', 'color:red');
        test_utils_1.matchRuleAndDeclaration(result, 1, '.entry--x .imported--y', 'color:green');
        var media = result.nodes[2];
        test_utils_1.matchRuleAndDeclaration(media, 0, '.entry--x', 'color:yellow', '@media');
        test_utils_1.matchRuleAndDeclaration(media, 1, '.entry--x .imported--y', 'color:gold', '@media');
    });
    it('apply named mixin with extends and conflicting pseudo-element class at mixin deceleration level', function () {
        var result = test_utils_1.generateStylableRoot({
            entry: "/entry.st.css",
            files: {
                '/entry.st.css': {
                    namespace: 'entry',
                    content: "\n                :import {\n                    -st-from: \"./imported.st.css\";\n                    -st-named: mixme;\n                }\n                .x {\n                    -st-mixin: mixme;\n                }\n                "
                },
                '/imported.st.css': {
                    namespace: 'imported',
                    content: "\n                    :import {\n                        -st-from: \"./comp.st.css\";\n                        -st-default: Comp;\n                    }\n                    .part {}\n                    .mixme {\n                        -st-extends: Comp;\n                        color: red;\n                    }\n                    .mixme::part .part {\n                        color: green;\n                    }\n                "
                },
                '/comp.st.css': {
                    namespace: 'comp',
                    content: "\n                    .part{}\n                "
                }
            }
        });
        test_utils_1.matchRuleAndDeclaration(result, 1, '.entry--x .comp--part .imported--part', 'color: green');
    });
    it('apply mixin when rootScoping enabled', function () {
        var result = test_utils_1.generateStylableRoot({
            entry: "/entry.st.css",
            scopeRoot: true,
            files: {
                '/entry.st.css': {
                    namespace: 'entry',
                    content: "\n                        :import {\n                            -st-from: \"./look1.st.css\";\n                            -st-default: Look1;\n                        }\n                        .root {\n                            -st-mixin: Look1(c1 yellow);\n                        }\n                    "
                },
                '/look1.st.css': {
                    namespace: 'look1',
                    content: "\n                        :import {\n                            -st-from: \"./base.st.css\";\n                            -st-default: Base;\n                        }\n                        :vars {\n                            c1: red;\n                        }\n                        .root {\n                            -st-extends:Base;\n                            color:value(c1);\n                        }\n                        .panel {\n                            color:gold;\n                        }\n                        .root::label {\n                            color:green;\n                        }\n                    "
                },
                '/base.st.css': {
                    namespace: 'base',
                    content: "\n                        .root {}\n                        .label {}\n                    "
                }
            }
        });
        test_utils_1.matchRuleAndDeclaration(result, 0, '.entry--root', '-st-extends:Base;color:yellow');
        test_utils_1.matchRuleAndDeclaration(result, 1, '.entry--root .look1--panel', 'color:gold');
        test_utils_1.matchRuleAndDeclaration(result, 2, '.entry--root .base--label', 'color:green');
    });
    it('apply mixin from imported element', function () {
        var result = test_utils_1.generateStylableRoot({
            entry: "/entry.st.css",
            files: {
                '/entry.st.css': {
                    namespace: 'entry',
                    content: "\n                        :import {\n                            -st-from: \"./imported.st.css\";\n                            -st-named: X;\n                        }\n\n                        .x {\n                            -st-mixin: X;\n                        }\n                    "
                },
                '/imported.st.css': {
                    namespace: 'imported',
                    content: "\n                        X {color:green;}\n                    "
                }
            }
        });
        test_utils_1.matchRuleAndDeclaration(result, 0, '.entry--x', 'color:green');
    });
    it('apply nested mixins', function () {
        var result = test_utils_1.generateStylableRoot({
            entry: "/entry.st.css",
            files: {
                '/entry.st.css': {
                    namespace: 'entry',
                    content: "\n                    :import {\n                        -st-from: \"./r.st.css\";\n                        -st-default: R;\n                    }\n                    .x {\n                        -st-mixin: R;\n                    }\n                "
                },
                '/r.st.css': {
                    namespace: 'r',
                    content: "\n                    :import {\n                        -st-from: \"./y.st.css\";\n                        -st-default: Y;\n                    }\n                    .r{\n                        -st-mixin: Y;\n                    }\n                "
                },
                '/y.st.css': {
                    namespace: 'y',
                    content: "\n                    .y {\n\n                    }\n                "
                }
            }
        });
        test_utils_1.matchAllRulesAndDeclarations(result, [['.entry--x', ''], ['.entry--x .r--r', ''], ['.entry--x .r--r .y--y', '']], '');
    });
    describe('url() handling', function () {
        it('should rewrite relative urls', function () {
            var result = test_utils_1.generateStylableRoot({
                entry: "/entry.st.css",
                files: {
                    '/entry.st.css': {
                        namespace: 'entry',
                        content: "\n                    :import {\n                        -st-from: \"./a/mix.st.css\";\n                        -st-named: mix;\n                    }\n                    .x {\n                        -st-mixin: mix;\n                    }\n                "
                    },
                    '/a/mix.st.css': {
                        namespace: 'mix',
                        content: "\n                    :import {\n                        -st-from: \"./b/other-mix.st.css\";\n                        -st-named: other-mix;\n                    }\n                    .mix {\n                        background: url(./asset.png);\n                        -st-mixin: other-mix;\n                    }\n                "
                    },
                    '/a/b/other-mix.st.css': {
                        namespace: 'other-mix',
                        content: "\n                    .other-mix {\n                        background: url(./asset.png)\n                    }\n                "
                    }
                }
            });
            test_utils_1.matchAllRulesAndDeclarations(result, [['.entry--x', 'background: url(./a/asset.png);background: url(./a/b/asset.png)']], '');
        });
        it('should rewrite relative urls (case2)', function () {
            var result = test_utils_1.generateStylableRoot({
                entry: "/entry.st.css",
                files: {
                    '/entry.st.css': {
                        namespace: 'entry',
                        content: "\n                    :import {\n                        -st-from: \"./a/mix.st.css\";\n                        -st-named: mix;\n                    }\n                    .x {\n                        -st-mixin: mix;\n                    }\n                "
                    },
                    '/a/mix.st.css': {
                        namespace: 'mix',
                        content: "\n                    .mix {\n                        background: url(../asset.png);\n                    }\n                "
                    }
                }
            });
            test_utils_1.matchAllRulesAndDeclarations(result, [['.entry--x', 'background: url(./asset.png)']], '');
        });
    });
    describe('Mixins with named parameters', function () {
        it('apply mixin with :vars override (local scope)', function () {
            var result = test_utils_1.generateStylableRoot({
                entry: "/entry.st.css",
                files: {
                    '/entry.st.css': {
                        namespace: 'entry',
                        content: "\n                            :vars {\n                                color1: red;\n                            }\n\n                            .x {\n                                -st-mixin: y(color1 green);\n                            }\n\n                            .y {color:value(color1);}\n\n                        "
                    }
                }
            });
            test_utils_1.matchRuleAndDeclaration(result, 0, '.entry--x', 'color:green');
        });
        it('apply mixin with :vars override with space in value', function () {
            var result = test_utils_1.generateStylableRoot({
                entry: "/entry.st.css",
                files: {
                    '/entry.st.css': {
                        namespace: 'entry',
                        content: "\n                            :vars {\n                                border1: red;\n                            }\n\n                            .x {\n                                -st-mixin: y(border1 1px solid red);\n                            }\n\n                            .y {border:value(border1);}\n\n                        "
                    }
                }
            });
            test_utils_1.matchRuleAndDeclaration(result, 0, '.entry--x', 'border:1px solid red');
        });
        it('apply mixin with :vars override', function () {
            var result = test_utils_1.generateStylableRoot({
                entry: "/entry.st.css",
                files: {
                    '/entry.st.css': {
                        namespace: 'entry',
                        content: "\n                            :import {\n                                -st-from: \"./imported.st.css\";\n                                -st-named: y;\n                            }\n\n                            .x {\n                                -st-mixin: y(color1 green);\n                            }\n                        "
                    },
                    '/imported.st.css': {
                        namespace: 'imported',
                        content: "\n                        :vars {\n                            color1: red;\n                        }\n                        .y {color:value(color1);}\n                    "
                    }
                }
            });
            test_utils_1.matchRuleAndDeclaration(result, 0, '.entry--x', 'color:green');
        });
        it('apply mixin with :vars multiple override', function () {
            var result = test_utils_1.generateStylableRoot({
                entry: "/entry.st.css",
                files: {
                    '/entry.st.css': {
                        namespace: 'entry',
                        content: "\n                            .x {\n                                -st-mixin: y(color1 green, color2 yellow);\n                            }\n\n                            .y {\n                                color:value(color1);\n                                background:value(color2);\n                            }\n                        "
                    }
                }
            });
            test_utils_1.matchRuleAndDeclaration(result, 0, '.entry--x', 'color:green;background:yellow');
        });
        it('apply mixin with :vars multiple levels', function () {
            var result = test_utils_1.generateStylableRoot({
                entry: "/entry.st.css",
                files: {
                    '/entry.st.css': {
                        namespace: 'entry',
                        content: "\n                    :import {\n                        -st-from: \"./imported.st.css\";\n                        -st-named: y;\n                    }\n\n                    .x {\n                        -st-mixin: y(color1 green, color2 yellow);\n                    }\n                "
                    },
                    '/imported.st.css': {
                        namespace: 'imported',
                        content: "\n                        :import {\n                            -st-from: \"./mixin.st.css\";\n                            -st-named: z;\n                        }\n                        :vars {\n                            color1: red;\n                            color2: blue;\n                        }\n                        .y {\n                            -st-mixin: z(color3 value(color1), color4 value(color2));\n                        }\n                    "
                    },
                    '/mixin.st.css': {
                        namespace: 'mixin',
                        content: "\n                        :vars {\n                            color3: red;\n                            color4: blue;\n                        }\n                        .z {\n                            border: 1px solid value(color3);\n                            background: value(color4);\n                        }\n                    "
                    }
                }
            });
            test_utils_1.matchRuleAndDeclaration(result, 0, '.entry--x', 'border: 1px solid green;background: yellow');
        });
    });
});
//# sourceMappingURL=css-mixins.spec.js.map