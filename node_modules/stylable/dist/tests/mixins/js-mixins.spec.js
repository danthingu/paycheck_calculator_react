"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/* tslint:disable:max-line-length */
var chai_1 = require("chai");
var test_utils_1 = require("../utils/test-utils");
describe('Javascript Mixins', function () {
    it('simple mixin', function () {
        var result = test_utils_1.generateStylableRoot({
            entry: "/style.st.css",
            files: {
                '/style.st.css': {
                    content: "\n                    :import {\n                        -st-from: \"./mixin\";\n                        -st-default: mixin;\n                    }\n                    .container {\n                        background: green;\n                        -st-mixin: mixin;\n                        border: 0;\n                    }\n                "
                },
                '/mixin.js': {
                    content: "\n                    module.exports = function() {\n                        return {\n                            color: \"red\"\n                        }\n                    }\n                "
                }
            }
        });
        var rule = result.nodes[0];
        chai_1.expect(rule.nodes[1].toString()).to.equal('color: red');
    });
    it('simple mixin and remove all -st-mixins', function () {
        var result = test_utils_1.generateStylableRoot({
            entry: "/style.st.css",
            files: {
                '/style.st.css': {
                    content: "\n                    :import {\n                        -st-from: \"./mixin\";\n                        -st-default: mixin;\n                    }\n                    .container {\n                        -st-mixin: mixin;\n                        -st-mixin: mixin;\n                        -st-mixin: mixin;\n                    }\n                "
                },
                '/mixin.js': {
                    content: "\n                    module.exports = function() {\n                        return {\n                            color: \"red\"\n                        }\n                    }\n                "
                }
            }
        });
        var rule = result.nodes[0];
        chai_1.expect(rule.nodes[0].toString()).to.equal('color: red');
    });
    it('complex mixin', function () {
        var result = test_utils_1.generateStylableRoot({
            entry: "/entry.st.css",
            files: {
                '/entry.st.css': {
                    namespace: 'entry',
                    content: "\n                    :import {\n                        -st-from: \"./mixin\";\n                        -st-default: mixin;\n                    }\n                    .container {\n                        -st-mixin: mixin;\n                        -st-mixin: mixin;\n                        -st-mixin: mixin;\n                    }\n                    .containerB {\n                        color: blue;\n                    }\n                "
                },
                '/mixin.js': {
                    content: "\n                    module.exports = function() {\n                        return {\n                            color: \"red\",\n                            \".my-selector\": {\n                                color: \"green\",\n                                \"&:hover\": {\n                                    background: \"yellow\"\n                                }\n                            },\n                            \"&:hover\": {\n                                color: \"gold\"\n                            }\n                        }\n                    }\n                "
                }
            }
        });
        var rule = result.nodes[0];
        chai_1.expect(rule.selector, 'rule 1 selector').to.equal('.entry--container');
        chai_1.expect(rule.nodes[0].toString(), 'rule 1 decl').to.equal('color: red');
        var rule2 = result.nodes[1];
        chai_1.expect(rule2.selector, 'rule 2 selector').to.equal('.entry--container .entry--my-selector');
        chai_1.expect(rule2.nodes[0].toString(), 'rule 2 decl').to.equal('color: green');
        var rule3 = result.nodes[2];
        chai_1.expect(rule3.selector, 'rule 3 selector').to.equal('.entry--container .entry--my-selector:hover');
        chai_1.expect(rule3.nodes[0].toString(), 'rule 3 decl').to.equal('background: yellow');
        var rule4 = result.nodes[3];
        chai_1.expect(rule4.selector, 'rule 4 selector').to.equal('.entry--container:hover');
        chai_1.expect(rule4.nodes[0].toString(), 'rule 4 decl').to.equal('color: gold');
    });
    it('mixin on multiple selectors', function () {
        var result = test_utils_1.generateStylableRoot({
            entry: "/entry.st.css",
            files: {
                '/entry.st.css': {
                    namespace: 'entry',
                    content: "\n                    :import {\n                        -st-from: \"./mixin\";\n                        -st-default: mixin;\n                    }\n                    .containerA, .containerB {\n                        -st-mixin: mixin;\n\n                    }\n                "
                },
                '/mixin.js': {
                    content: "\n                    module.exports = function() {\n                        return {\n                            color: \"red\",\n                            \"&:hover\": {\n                                color: \"green\"\n                            }\n                        }\n                    }\n                "
                }
            }
        });
        test_utils_1.matchRuleAndDeclaration(result, 0, '.entry--containerA, .entry--containerB', 'color: red');
        test_utils_1.matchRuleAndDeclaration(result, 1, '.entry--containerA:hover, .entry--containerB:hover', 'color: green');
    });
    it('mixin with multiple selectors', function () {
        var result = test_utils_1.generateStylableRoot({
            entry: "/entry.st.css",
            files: {
                '/entry.st.css': {
                    namespace: 'entry',
                    content: "\n                    :import {\n                        -st-from: \"./mixin\";\n                        -st-default: mixin;\n                    }\n                    .containerA {\n                        -st-mixin: mixin;\n                    }\n                "
                },
                '/mixin.js': {
                    content: "\n                    module.exports = function() {\n                        return {\n                            \"&:hover, .class\": {\n                                color: \"green\"\n                            }\n                        }\n                    }\n                "
                }
            }
        });
        test_utils_1.matchRuleAndDeclaration(result, 1, '.entry--containerA:hover, .entry--containerA .entry--class', 'color: green');
    });
    it('mixin with multiple var values', function () {
        var result = test_utils_1.generateStylableRoot({
            entry: "/entry.st.css",
            files: {
                '/entry.st.css': {
                    namespace: 'entry',
                    content: "\n                    :import {\n                        -st-from: \"./mixin\";\n                        -st-default: mixin;\n                    }\n                    :vars {\n                        color1: red;\n                        color2: blue;\n                    }\n                    .container {\n                        -st-mixin: mixin(value(color1), value(color2));\n                    }\n                "
                },
                '/mixin.js': {
                    content: "\n                    module.exports = function(options) {\n                        return {\n                            color: options[0],\n                            background: options[1]\n                        }\n                    }\n                "
                }
            }
        });
        test_utils_1.matchRuleAndDeclaration(result, 0, '.entry--container', 'color: red;background: blue');
    });
    it('should not root scope js mixins', function () {
        var result = test_utils_1.generateStylableRoot({
            entry: "/entry.st.css",
            scopeRoot: true,
            files: {
                '/entry.st.css': {
                    namespace: 'entry',
                    content: "\n                    :import{\n                        -st-from:'./mixin.js';\n                        -st-named: mixStuff;\n                    }\n                    .gaga{\n                        color:red;\n                        -st-mixin: mixStuff;\n                    }\n                "
                },
                '/mixin.js': {
                    content: "\n                    module.exports = {\n                        mixStuff:function(){\n                            return {\n                                \"background\":\"green\",\n                                \".child\":{\n                                    \"color\": \"yellow\"\n                                }\n                            }\n                        }\n                    };\n                "
                }
            }
        });
        test_utils_1.matchRuleAndDeclaration(result, 0, '.entry--root .entry--gaga', 'color:red;background:green');
        test_utils_1.matchRuleAndDeclaration(result, 1, '.entry--root .entry--gaga .entry--child', 'color:yellow');
    });
    it('multiple mixins', function () {
        var result = test_utils_1.generateStylableRoot({
            entry: "/entry.st.css",
            files: {
                '/entry.st.css': {
                    namespace: 'entry',
                    content: "\n                    :import {\n                        -st-from: \"./mixin1\";\n                        -st-default: mixin1;\n                    }\n                    :import {\n                        -st-from: \"./mixin2\";\n                        -st-default: mixin2;\n                    }\n                    .container {\n                        -st-mixin: mixin1(red) mixin2(blue);\n                    }\n                "
                },
                '/mixin1.js': {
                    content: "\n                    module.exports = function(options) {\n                        return {\n                            color: options[0]\n                        }\n                    }\n                "
                },
                '/mixin2.js': {
                    content: "\n                    module.exports = function(options) {\n                        return {\n                            background: options[0]\n                        }\n                    }\n                "
                }
            }
        });
        test_utils_1.matchRuleAndDeclaration(result, 0, '.entry--container', 'color: red;background: blue');
    });
    it('multiple same mixin', function () {
        var result = test_utils_1.generateStylableRoot({
            entry: "/entry.st.css",
            files: {
                '/entry.st.css': {
                    namespace: 'entry',
                    content: "\n                    :import {\n                        -st-from: \"./mixin1\";\n                        -st-default: mixin1;\n                    }\n                    .container-a {\n                        -st-mixin: mixin1(red);\n                    }\n                    .container-b {\n                        -st-mixin: mixin1(blue);\n                    }\n                "
                },
                '/mixin1.js': {
                    content: "\n                    module.exports = function(options) {\n                        return {\n                            color: options[0]\n                        }\n                    }\n                "
                }
            }
        });
        test_utils_1.matchRuleAndDeclaration(result, 0, '.entry--container-a', 'color: red');
        test_utils_1.matchRuleAndDeclaration(result, 1, '.entry--container-b', 'color: blue');
    });
    it('@keyframes mixin', function () {
        var result = test_utils_1.generateStylableRoot({
            entry: "/style.st.css",
            files: {
                '/style.st.css': {
                    namespace: 'entry',
                    content: "\n                    :import {\n                        -st-from: \"./mixin\";\n                        -st-default: mixin;\n                    }\n                    .container {\n                        -st-mixin: mixin;\n                    }\n                "
                },
                '/mixin.js': {
                    content: "\n                    module.exports = function() {\n                        return {\n                            \"@keyframes abc\": {\n                                \"0%\": { \"color\": \"red\" },\n                                \"100%\": { \"color\": \"green\" }\n                            }\n                        }\n                    }\n                "
                }
            }
        });
        var _a = result.nodes, rule = _a[0], keyframes = _a[1];
        chai_1.expect(rule.nodes.length, 'rule is empty').to.equal(0);
        if (keyframes.type !== 'atrule') {
            throw new Error('expected 2nd rule to be the @keyframes');
        }
        chai_1.expect(keyframes.params, 'keyframes id').to.equal('entry--abc');
        chai_1.expect(keyframes.nodes[0].selector, 'first keyframe').to.equal('0%');
        chai_1.expect(keyframes.nodes[1].selector, 'last keyframe').to.equal('100%');
    });
    describe('url() handling', function () {
        it('should rewrite relative urls', function () {
            var result = test_utils_1.generateStylableRoot({
                entry: "/entry.st.css",
                files: {
                    '/entry.st.css': {
                        namespace: 'entry',
                        content: "\n                            :import {\n                                -st-from: \"./a/b/mixin1.js\";\n                                -st-default: mix;\n                            }\n                            .x {\n                                -st-mixin: mix;\n                            }\n                        "
                    },
                    '/a/b/mixin1.js': {
                        content: "\n                        module.exports = function(options) {\n                            return {\n                                background: \"url(./asset.png)\"\n                            }\n                        }\n                    "
                    }
                }
            });
            test_utils_1.matchAllRulesAndDeclarations(result, [['.entry--x', 'background: url(./a/b/asset.png)']], '');
        });
        it('should rewrite relative urls (case2)', function () {
            var result = test_utils_1.generateStylableRoot({
                entry: "/entry.st.css",
                files: {
                    '/entry.st.css': {
                        namespace: 'entry',
                        content: "\n                    :import {\n                        -st-from: \"./a/mixin1.js\";\n                        -st-default: mix;\n                    }\n                    .x {\n                        -st-mixin: mix;\n                    }\n                "
                    },
                    '/a/mixin1.js': {
                        content: "\n                        module.exports = function(options) {\n                            return {\n                                background: \"url(../asset.png)\"\n                            }\n                        }\n                    "
                    }
                }
            });
            test_utils_1.matchAllRulesAndDeclarations(result, [['.entry--x', 'background: url(./asset.png)']], '');
        });
    });
});
//# sourceMappingURL=js-mixins.spec.js.map