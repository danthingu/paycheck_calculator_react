"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var cached_process_file_1 = require("./cached-process-file");
var parser_1 = require("./parser");
var path = require("./path");
var stylable_processor_1 = require("./stylable-processor");
var ResolverFactory = require('enhanced-resolve/lib/ResolverFactory');
function createInfrastructure(projectRoot, fileSystem, onProcess, resolveOptions, resolveNamespace) {
    if (resolveOptions === void 0) { resolveOptions = {}; }
    var eResolver = ResolverFactory.createResolver(__assign({ useSyncFileSystemCalls: true, fileSystem: fileSystem }, resolveOptions));
    var resolvePath = function (context, moduleId) {
        if (context === void 0) { context = projectRoot; }
        if (!path.isAbsolute(moduleId) && moduleId.charAt(0) !== '.') {
            moduleId = eResolver.resolveSync({}, context, moduleId);
        }
        return moduleId;
    };
    var fileProcessor = cached_process_file_1.cachedProcessFile(function (from, content) {
        return stylable_processor_1.process(parser_1.safeParse(content, { from: resolvePath(projectRoot, from) }), undefined, resolveNamespace);
    }, {
        readFileSync: function (resolvedPath) {
            return fileSystem.readFileSync(resolvedPath, 'utf8');
        },
        statSync: function (resolvedPath) {
            var stat = fileSystem.statSync(resolvedPath);
            if (!stat.mtime) {
                return {
                    mtime: new Date(0)
                };
            }
            return stat;
        }
    }, function (path, context) { return resolvePath(context || projectRoot, path); });
    if (onProcess) {
        fileProcessor.postProcessors.push(onProcess);
    }
    return {
        resolvePath: resolvePath,
        fileProcessor: fileProcessor
    };
}
exports.createInfrastructure = createInfrastructure;
//# sourceMappingURL=create-infra-structure.js.map