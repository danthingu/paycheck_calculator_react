"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var path = require("./path");
var _a = require('css-selector-tokenizer'), parseValues = _a.parseValues, stringifyValues = _a.stringifyValues;
var isUrl = require('url-regex')({ exact: true, strict: true });
function collectAssets(ast) {
    var assetDependencies = [];
    var onUrl = function (node) {
        assetDependencies.push(node.url);
    };
    ast.walkDecls(function (decl) { return processDeclarationUrls(decl, onUrl, false); });
    return assetDependencies;
}
exports.collectAssets = collectAssets;
function isExternal(url) {
    return url === '' || url.startsWith('data:') || isUrl.test(url);
}
exports.isExternal = isExternal;
function isAsset(url) {
    return !isExternal(url);
}
exports.isAsset = isAsset;
function makeAbsolute(resourcePath, rootContext, moduleContext) {
    var isAbs = path.isAbsolute(resourcePath);
    var abs;
    if (isExternal(resourcePath)) {
        abs = resourcePath;
    }
    else if (isAbs && resourcePath[0] === '/') {
        abs = path.join(rootContext, resourcePath);
    }
    else if (isAbs) {
        abs = resourcePath;
    }
    else {
        abs = path.join(moduleContext, resourcePath);
    }
    return abs;
}
exports.makeAbsolute = makeAbsolute;
function processDeclarationUrls(decl, onUrl, transform) {
    var ast = parseValues(decl.value);
    ast.nodes.forEach(function (node) {
        node.nodes.forEach(function (node) { return findUrls(node, onUrl); });
    });
    if (transform) {
        decl.value = stringifyValues(ast);
    }
}
exports.processDeclarationUrls = processDeclarationUrls;
function findUrls(node, onUrl) {
    var type = node.type, _a = node.nodes, nodes = _a === void 0 ? [] : _a;
    switch (type) {
        case 'value':
            nodes.forEach(function (_) { return findUrls(_, onUrl); });
            break;
        case 'nested-item':
            nodes.forEach(function (_) { return findUrls(_, onUrl); });
            break;
        case 'url':
            onUrl(node);
            break;
    }
}
function fixRelativeUrls(ast, mix, targetMeta) {
    ast.walkDecls(function (decl) {
        return processDeclarationUrls(decl, function (node) {
            if (isAsset(node.url)) {
                if (node.url[0] === '.') {
                    node.url =
                        './' +
                            path
                                .join(path.relative(path.dirname(targetMeta.source), path.dirname(mix.ref.import.from)), node.url)
                                .replace(/\\/gm, '/');
                }
            }
        }, true);
    });
}
exports.fixRelativeUrls = fixRelativeUrls;
//# sourceMappingURL=stylable-assets.js.map